# Documentation: http://docs.travis-ci.com/user/languages/julia/
language: julia
os:
  - linux
julia:
  - 1.3
  - nightly
env:
   global:
     - JULIA_NUM_THREADS=2
matrix:
  allow_failures:
    - julia: nightly
  fast_finish: true
notifications:
  email: false

# Do not build my PR twice.  Use the build on branch.
# https://github.com/travis-ci/travis-ci/issues/1147#issuecomment-76296437
if: NOT (type == pull_request AND head_repo == tkf/Transducers.jl)

before_install:
  - unset JULIA_PROJECT
  - julia -e 'using Pkg; pkg"add https://github.com/tkf/Run.jl"'
install:
  - julia -e 'using Run; Run.prepare_test()'
script:
  - julia -e 'using Run; Run.test()'
after_success:
  - julia -e 'using Pkg; Pkg.add("Coverage"); using Coverage; Codecov.submit(process_folder())'
  - julia -e 'using Pkg; Pkg.add("Coverage"); using Coverage; Coveralls.submit(process_folder())'

jobs:
  include:
    - julia: 1.0
      os: linux
      install:
        - julia -e 'using Run; Run.prepare("test/environments/jl10")'
      script:
        - julia -e 'using Run; Run.test(project="test/environments/jl10")'
    - name: "Benchmark (Sequential)"
      os: linux
      install:
        - julia -e 'using Run; Run.prepare("benchmark")'
      before_script:
        - git fetch origin '+refs/heads/master:refs/remotes/origin/master'
        - git branch master origin/master
        # Run benchmark outside `script` so that it's hidden by default:
        - julia -e 'using Run; Run.script("benchmark/runjudge.jl")'
      script:
        - julia -e 'using Run; Run.script("benchmark/pprintjudge.jl")'
      after_success: skip
      if: NOT (branch = master)
    - name: "Benchmark (Multi-thread)"
      os: linux
      install:
        - julia -e 'using Run; Run.prepare("benchmark")'
      before_script:
        - git fetch origin '+refs/heads/parallel-benchmark:refs/remotes/origin/parallel-benchmark'
        - git branch parallel-benchmark origin/parallel-benchmark
        # Run benchmark outside `script` so that it's hidden by default:
        - julia -e 'using Run; Run.script("benchmark/runjudge_multi_thread.jl")'
      script:
        - julia -e 'using Run; Run.script("benchmark/pprintjudge_multi_thread.jl")'
      after_success: skip
      if: NOT (branch = master)
    - stage: "Documentation"
      julia: 1.3
      os: linux
      install:
        - julia -e 'using Run; Run.prepare_docs()'
      script:
        - julia -e 'using Run; Run.docs()'
      after_success: skip
