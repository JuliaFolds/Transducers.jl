var documenterSearchIndex = {"docs":
[{"location":"#Transducers-for-Julia-1","page":"Home","title":"Transducers for Julia","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"DocTestSetup = quote\n    using Transducers\nend","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Transducers are transformations of \"sequence\" of input that can be composed very efficiently.  The interface used by transducers naturally describes a wide range of processes that is expressible as a succession of steps. Furthermore, transducers can be defined without specifying the details of the input and output (collections, streams, channels, etc.)  and therefore achieves a full reusability.  Transducers are introduced by Rich Hickey, the creator of the Clojure language. His Strange Loop talk is a great introduction to the idea of transducers.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Transducers.jl is an implementation of the transducers in Julia. Aiming to satisfy high-performance needs of Julia users, Transducers.jl uses a formulation that is pure [pure] and aiding type-stability.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"]add Transducers","category":"page"},{"location":"#Examples-1","page":"Home","title":"Examples","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"If you are familiar with iterators (see also Base.Iterators and IterTools.jl) it would look very familiar to you:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> using Transducers\n\njulia> collect(Map(x -> 2x), 1:3)  # double each element\n3-element Array{Int64,1}:\n 2\n 4\n 6\n\njulia> collect(Filter(iseven), 1:6)  # collect only evens\n3-element Array{Int64,1}:\n 2\n 4\n 6\n\njulia> collect(MapCat(x -> 1:x), 1:3)  # concatenate mapped results\n6-element Array{Int64,1}:\n 1\n 1\n 2\n 1\n 2\n 3\n","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Transducers can be composed (without, unlike iterators, referring to the input):","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> xf = Filter(iseven) |> Map(x -> 2x)\n       collect(xf, 1:6)\n3-element Array{Int64,1}:\n  4\n  8\n 12","category":"page"},{"location":"#","page":"Home","title":"Home","text":"An efficient way to use transducers is combination with mapfoldl.  This computation is done without creating any intermediate lazy object and compiles to a single loop:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> mapfoldl(xf, +, 1:6)\n24","category":"page"},{"location":"#Difference-to-iterators-1","page":"Home","title":"Difference to iterators","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"How mapfoldl and foldl are used illustrates the difference between iterators and transducers.  Implementation of the above computation in iterator would be:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"f(x) = 2x\nimap = Base.Iterators.Generator  # like `map`, but returns an iterator\nmapfoldl(f, +, filter(iseven, input), init=0)\nfoldl(+, imap(f, filter(iseven, input)))  # equivalent\n#        ______________________________\n#        composition occurs at input part","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Compare it to how transducers are used:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"mapfoldl(Filter(iseven) |> Map(f), +, input, init=0)\n#        ________________________\n#        composition occurs at computation part","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Although this is just a syntactic difference, it is reflected in the actual code generated by those two frameworks.  The code for iterator would be lowered to:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"function map_filter_iterators(xs, init)\n    ret = iterate(xs)\n    ret === nothing && return\n    acc = init\n    @goto filter\n    local state, x\n    while true\n        while true                                    # input\n            ret = iterate(xs, state)                  #\n            ret === nothing && return acc             #\n            @label filter                             #\n            x, state = ret                            #\n            iseven(x) && break             # filter   :\n        end                                #          :\n        y = 2x              # imap         :          :\n        acc += y    # +     :              :          :\n    end             # :     :              :          :\n    #                 + <-- imap <-------- filter <-- input\n    return acc\nend","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Notice that the iteration of input is the inner most block, followed by filter, imap, and then finally +.  Iterators are described as pull-based; an outer iterator (say imap) has to \"pull\" an item from the inner iterator (filter in above example). It is reflected in the lowered code above.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"On the other hand, the code using transducers is lowered to:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"function map_filter_transducers(xs, init)\n    acc = init\n    #              input -> Filter --> Map --> +\n    for x in xs  # input    :          :       :\n        if iseven(x)  #     Filter     :       :\n            y = 2x    #                Map     :\n            acc += y  #                        +\n        end\n    end\n    return acc\nend\n\nxs = [6, 8, 1, 4, 5, 6, 6, 7, 9, 9, 7, 8, 6, 8, 2, 5, 2, 4, 3, 7]\n@assert map_filter_iterators(xs, 0) == map_filter_transducers(xs, 0)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Notice that the iteration of input is at the outer most block while + is in the inner most block.  Transducers passed to mapfoldl appears in the block between them in the order they are composed.  An outer transducer (say Filter) \"pushes\" arbitrary number of items to the inner transducer (Map in above example). Note that Filter can choose to not push an item (i.e., push zero item) when the predicate returns false.  This push-based nature of the transducers allows the generation of very natural and efficient code.  To put it another way, the transducers and transducible processes own the loop.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"As a consequence, computations requiring to expand an item into a sequence can be processed efficiently.  Consider the following example:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> xf = Map(x -> 1:x) |> Filter(iseven ∘ sum) |> Cat()\n       mapfoldl(xf, *, 1:10)\n29262643200","category":"page"},{"location":"#","page":"Home","title":"Home","text":"This is lowered to a nested for loops:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"function map_filter_cat_transducers(xs, init)\n    acc = init\n    for x in xs\n        y1 = 1:x                # Map\n        if iseven(sum(y1))      # Filter\n            for y2 in y1        # Cat\n                acc *= y2       # *\n            end\n        end\n    end\n    return acc\nend\n\n@assert mapfoldl(xf, *, 1:10) == map_filter_cat_transducers(1:10, 1)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"It is not straightforward to implement an iterator like Cat that can output more than one items at a time.  Such an iterator has to track the state of the inner (y1 in above) and outer (xs in above) iterators and conditionally invoke the outer iterator once the inner iterator terminates.  This generates a complicated code and the compiler would have hard time optimizing it.","category":"page"},{"location":"#List-of-transducers-1","page":"Home","title":"List of transducers","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Here is the list of pre-defined transducers:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"import Markdown\nimport Transducers\nMarkdown.MD(Transducers.TransducerLister())","category":"page"},{"location":"#Glossary-1","page":"Home","title":"Glossary","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"mapfoldl(xf, step, input, init=...)\n#   |    |   |     |\n#   |    |   |     `-- reducible\n#   |    |   |\n#   |    |   `-- \"bottom\" (inner most) reducing function\n#   |    |\n#   |    `-- transducer\n#   |\n#   `-- transducible process","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Reducing function or Reducing step (function): A reducing function combines result-so-far with the input.  It in a narrow sense is a \"callable\" op of the signature op(::X, ::Y) :: X (or op(::X, ::X) :: X in case for mapreduce) or schematically:\n(textresult-so-far textinput) mapsto textresult-so-far\nIt is the function that can be passed to the classic (non-Transducers.jl) Base.foldl or Base.reduce.  It is sometimes referred to as a step or op.  In Transducers.jl, next(rf, ::X, ::Y) :: X is used instead of a \"bare\" callable.  Furthermore, a reducing function in a loose sense also includes other interfaces such as start(rf, ::X) and complete(rf, ::X).\nTransducer: A transducer transforms a reducing function into a new reducing function.  It is sometimes referred to as a xf or xform.  A transducer can be composed of many sub-transducers; the syntax in Transducers.jl is xf = xf₁ |> xf₂ |> ... |> xfₙ.  The composed transducers are applied to the \"bottom\" reducing function from right to left, i.e., schematically, a new reducing function mathrmrf is obtained from the \"bottom\" reducing function mathrmstep by\nmathrmrf =\nmathrmxf_1(mathrmxf_2((mathrmxf_n(mathrmstep))))\nGiven a composition xf₁ |> xf₂, transducer xf₂ is said to be the inner transducer of xf₁ |> xf₂.  Likewise, mathrmxf_2(mathrmrf) is an inner reducing function of mathrmxf_1(mathrmxf_2(mathrmrf)).\nReducible collection (or just Reducible): Any object that can be passed to mapfoldl and alike is reducible.  A reducible collection knows how to apply reducing function to its elements.  Iterators are automatically reducible as this is the canonical fallback implementation.\nTransducible process: A function that can reduce reducible collections using transducers is a transducible process.  Examples are mapfoldl and mapreduce.  Find more in Transducible processes.","category":"page"},{"location":"#Links-1","page":"Home","title":"Links","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"\"Transducers\" by Rich Hickey - YouTube\nRich Hickey - Inside Transducers - YouTube\nCppCon 2015: Juan Pedro Bolívar Puente “Transducers: from Clojure to C++\" - YouTube","category":"page"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"[pure]: ...although not pure in the strong sense as Base.@pure.","category":"page"},{"location":"manual/#Transducers-and-Transducible-processes-1","page":"Manual","title":"Transducers and Transducible processes","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"Pages = [\"manual.md\"]\nOrder = [:function, :type]","category":"page"},{"location":"manual/#Transducible-processes-1","page":"Manual","title":"Transducible processes","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"mapfoldl\ntransduce\nfoldl\nforeach\nmapreduce\nreduce\neduction\nmap!\ncopy!\nappend!\ncollect\nChannel","category":"page"},{"location":"manual/#Base.mapfoldl","page":"Manual","title":"Base.mapfoldl","text":"mapfoldl(xf, step, reducible; init, simd) :: T\ntransduce(xf, step, init, reducible; simd) :: Union{T, Reduced{T}}\n\nCompose transducer xf with reducing step function step and reduce itr using it.\n\nnote: Note\ntransduce differs from mapfoldl as Reduced{T} is returned if the transducer xf or step aborts the reduction.\n\nThis API is modeled after transduce in Clojure.\n\nArguments\n\nxf::Transducer: A transducer.\nstep: A callable which accepts 1 and 2 arguments.  If it only accepts 2 arguments, wrap it with Completing to \"add\" 1-argument form (i.e., complete protocol).\nreducible: A reducible object (array, dictionary, any iterator, etc.).\ninit: An initial value fed to the first argument to reducing step function step.  This argument can be omitted for well know binary operations like + or *.  Supported binary operations are listed in InitialValues.jl documentation.  When Init (not the result of Init, such as Init(*)) is given, it is automatically \"instantiated\" as Init(step) (where step is appropriately unwrapped if step is a Completing).  See Empty result handling in the manual for more information.\nsimd: If true or :ivdep, enable SIMD using Base.@simd.  If :ivdep, use @simd ivdep for ... end variant.  Read Julia manual of Base.@simd to understand when it is appropriate to use this option.  For example, simd = :ivdep must not be used with stateful transducer like Scan.  This option has no effect if false (default).\n\nExamples\n\njulia> using Transducers\n\njulia> function step_demo(state, input)\n           @show state, input\n           state + input\n       end;\n\njulia> function step_demo(state)\n           println(\"Finishing with state = \", state)\n           state\n       end;\n\njulia> mapfoldl(Filter(isodd), step_demo, 1:4, init=0.0)\n(state, input) = (0.0, 1)\n(state, input) = (1.0, 3)\nFinishing with state = 4.0\n4.0\n\n\n\n\n\n","category":"function"},{"location":"manual/#Transducers.transduce","page":"Manual","title":"Transducers.transduce","text":"transduce(xf, step, init, reducible) :: Union{T, Reduced{T}}\n\nSee mapfoldl.\n\n\n\n\n\n","category":"function"},{"location":"manual/#Base.foldl","page":"Manual","title":"Base.foldl","text":"foldl(step, xf::Transducer, reducible; init, simd)\nfoldl(step, ed::Eduction; init, simd)\n\nThe first form is a shorthand for mapfoldl(xf, Completing(step), reducible).  It is intended to be used with a do block.  It is also equivalent to foldl(step, eduction(xf, itr)).\n\nSee: mapfoldl, Empty result handling.\n\nExamples\n\njulia> using Transducers\n\njulia> foldl(Filter(isodd), 1:4, init=0.0) do state, input\n           @show state, input\n           state + input\n       end\n(state, input) = (0.0, 1)\n(state, input) = (1.0, 3)\n4.0\n\n\n\n\n\n","category":"function"},{"location":"manual/#Base.foreach","page":"Manual","title":"Base.foreach","text":"foreach(eff, xf::Transducer, reducible; simd)\nforeach(eff, ed::Eduction; simd)\n\nFeed the results of xf processing items in reducible into a unary function eff.  This is useful when the primary computation at the bottom is the side-effect.  It is also equivalent to foreach(eff, eduction(xf, coll)).  Note that\n\nforeach(eduction(xf, coll)) do x\n    ...\nend\n\ncan be more efficient than\n\nfor x in eduction(xf, coll)\n    ...\nend\n\nas the former does not have to translate the transducer protocol to the iterator protocol.\n\nforeach supports all constructs in the native for loop as well as the enhancements [julia_issue_22891] to break with a value (break D(x) below) and append the else clause (E(x) below).\n\n[julia_issue_22891]: See also: break with value + loop else clauses (JuliaLang/julia#22891)\n\nThis native for loop\n\nans = for x in xs\n    A(x)\n    B(x) && break\n    C(x) && break D(x)\nelse\n    E(x)\nend\n\ncan be written as\n\nans = foreach(Map(identity), xs) do x\n    A(x)\n    B(x) && return reduced()\n    C(x) && return reduced(D(x))\n    x  # required for passing `x` to `E(x)` below\nend |> ifunreduced() do x\n    E(x)\nend\n\nSee: mapfoldl, reduced, ifunreduced.\n\ncompat: Transducers.jl 0.3\nforeach is changed to return what the do block (eff function) returns as-is in version 0.3.  This was required for supporting \"for-else\" (|> ifunreduced).  Previously, it only supported break-with-value and always applied unreduced before it returns.\n\nExamples\n\njulia> using Transducers\n\njulia> foreach(eduction(Filter(isodd), 1:4)) do input\n           @show input\n       end\ninput = 1\ninput = 3\n3\n\njulia> foreach(Filter(!ismissing), [1, missing, 2, 3]) do input\n           @show input\n           if iseven(input)\n               return reduced()\n           end\n       end\ninput = 1\ninput = 2\nReduced(nothing)\n\nIt is often useful to append |> unreduced to unwrap Reduced in the final result (note that |> here is the standard function application, not the transducer composition).\n\njulia> foreach(Filter(!ismissing), [1, missing, 2, 3]) do input\n           reduced(\"got $input\")\n       end |> unreduced\n\"got 1\"\n\nCombination of break-with-value and for-else is useful for triggering action after (e.g.) some kind of membership testing failed:\n\njulia> has2(xs) = foreach(Filter(!ismissing), xs) do input\n           input == 2 && reduced(true)\n       end |> ifunreduced() do input\n           @show input\n           false\n       end;\n\njulia> has2([1, missing, 2, 3])\ntrue\n\njulia> has2([1, missing])\ninput = false\nfalse\n\nHowever, note the output input = false in the last example.  This is because how && works in Julia\n\njulia> false && \"otherwise\"\nfalse\n\nThus, pure membership testing functions like has2 above can be written in a more concise manner:\n\njulia> simpler_has2(xs) = foreach(Filter(!ismissing), xs) do input\n           input == 2 && reduced(true)\n       end |> unreduced;\n\njulia> simpler_has2([1, missing, 2, 3])\ntrue\n\njulia> simpler_has2([1, missing])\nfalse\n\n\n\n\n\n","category":"function"},{"location":"manual/#Base.mapreduce","page":"Manual","title":"Base.mapreduce","text":"mapreduce(xf, step, reducible; init, simd) :: T\n\nPossibly parallel version of mapfoldl.  The \"bottom\" reduction function step(::T, ::T) :: T must be associative and init must be its identity element.\n\nTransducers composing xf must be stateless and non-terminating (e.g., Map, Filter, Cat, etc.) except for ScanEmit.  Note that Scan is not supported (although possible in theory).\n\nSee mapfoldl.\n\n\n\n\n\n","category":"function"},{"location":"manual/#Base.reduce","page":"Manual","title":"Base.reduce","text":"reduce(step, xf, reducible; init, simd)\n\nLike mapreduce but step is automatically wrapped by Completing.\n\n\n\n\n\n","category":"function"},{"location":"manual/#Transducers.eduction","page":"Manual","title":"Transducers.eduction","text":"eduction(xf::Transducer, coll)\n\nCreate a iterable and reducible object.\n\nIterable.\nReducible; i.e., it can be handled by transduce efficiently.\n\nThis API is modeled after eduction in Clojure.\n\nExamples\n\njulia> using Transducers\n\njulia> for x in eduction(Filter(isodd) |> Take(3), 1:1000)\n           @show x\n       end\nx = 1\nx = 3\nx = 5\n\n\n\n\n\neduction(iterator::Iterators.Generator)\neduction(iterator::Iterators.Filter)\neduction(iterator::Iterators.Flatten)\n\nConvert an iterator to an eduction.  The iterators that are typically used in the generator comprehensions are supported.\n\ncompat: Transducers.jl 0.3\nNew in version 0.3.\n\nExamples\n\njulia> using Transducers\n\njulia> iter = (y for x in 1:10 if x % 2 == 0 for y in (x, x + 1));\n\njulia> ed = eduction(iter);\n\njulia> collect(iter) == collect(ed)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"manual/#Base.map!","page":"Manual","title":"Base.map!","text":"map!(xf::Transducer, dest, src; simd)\n\nFeed src to transducer xf, storing the result in dest. Collections dest and src must have the same shape.  Transducer xf may contain filtering transducers.  If some entries src are skipped, the corresponding entries in dest will be unchanged. Transducer xf must not contain any expansive transducers such as MapCat.\n\nSee also copy!.\n\nExamples\n\njulia> using Transducers\n\njulia> xs = collect(1:5)\n       ys = zero(xs)\n       map!(Filter(isodd), ys, xs)\n5-element Array{Int64,1}:\n 1\n 0\n 3\n 0\n 5\n\njulia> ans === ys\ntrue\n\n\n\n\n\n","category":"function"},{"location":"manual/#Base.copy!","page":"Manual","title":"Base.copy!","text":"copy!(xf::Transducer, dest, src)\n\nFeed src to transducer xf, storing the result in dest. Collections dest and src may have the same shape.  Source src must be iterable.  Destination dest must implement empty! and push!.\n\nSee also map!.\n\nExamples\n\njulia> using Transducers\n\njulia> copy!(PartitionBy(x -> x ÷ 3) |> Map(sum), Int[], 1:10)\n4-element Array{Int64,1}:\n  3\n 12\n 21\n 19\n\n\n\n\n\n","category":"function"},{"location":"manual/#Base.append!","page":"Manual","title":"Base.append!","text":"append!(xf::Transducer, dest, src)\n\nThis API is modeled after into in Clojure.\n\nExamples\n\njulia> using Transducers\n\njulia> append!(Drop(2), [-1, -2], 1:5)\n5-element Array{Int64,1}:\n -1\n -2\n  3\n  4\n  5\n\n\n\n\n\n","category":"function"},{"location":"manual/#Base.collect","page":"Manual","title":"Base.collect","text":"collect(xf::Transducer, itr)\n\nProcess an iterable itr using a transducer xf and collect the result into a Vector.\n\nExamples\n\njulia> using Transducers\n\njulia> collect(Interpose(missing), 1:3)\n5-element Array{Union{Missing, Int64},1}:\n 1\n  missing\n 2\n  missing\n 3\n\n\n\n\n\n","category":"function"},{"location":"manual/#Base.Channel","page":"Manual","title":"Base.Channel","text":"Channel(xf::Transducer, itr; kwargs...)\nChannel(ed::Eduction; kwargs...)\n\nPipe items from an iterable itr processed by the transducer xf through a channel.  Channel(xf, itr) and Channel(eduction(xf, itr)) are equivalent.  Note that itr itself can be a Channel.\n\nKeyword arguments are passed to Channel(function; kwargs...).\n\nExamples\n\njulia> using Transducers\n\njulia> ch1 = Channel(Filter(isodd), 1:5);\n\njulia> ch2 = Channel(Map(x -> 2x - 1), ch1);\n\njulia> ed = eduction(Map(x -> 1:x), ch2);\n\njulia> ch3 = Channel(Cat(), ed);\n\njulia> foreach(PartitionBy(isequal(1)), ch3) do input\n           @show input\n       end;\ninput = [1, 1]\ninput = [2, 3, 4, 5]\ninput = [1]\ninput = [2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers-1","page":"Manual","title":"Transducers","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"Modules = [Transducers]\nPrivate = false\nFilter = Transducers.is_transducer_type","category":"page"},{"location":"manual/#Transducers.Cat","page":"Manual","title":"Transducers.Cat","text":"Cat()\n\nConcatenate/flatten nested iterators.\n\nThis API is modeled after cat in Clojure.\n\nExamples\n\njulia> using Transducers\n\njulia> collect(Cat(), [[1, 2], [3], [4, 5]]) == 1:5\ntrue\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.Count","page":"Manual","title":"Transducers.Count","text":"Count([start[, step]])\n\nGenerate a sequence start, start + step, start + step + step, and so on.\n\nNote that input is ignored.  To use the input in the downstream reduction steps, use Zip.\n\nstart defaults to 1 and step defaults to oneunit(start).\n\nSee also: Iterators.countfrom. Enumerate\n\nExamples\n\njulia> using Transducers\n\njulia> collect(Zip(Map(identity), Count()), -3:-1)\n3-element Array{Tuple{Int64,Int64},1}:\n (-3, 1)\n (-2, 2)\n (-1, 3)\n\njulia> using Dates\n\njulia> collect(Zip(Map(identity), Count(Day(1))) |> Map(xs -> *(xs...)), 1:3) ==\n       [Day(1), Day(4), Day(9)]\ntrue\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.Dedupe","page":"Manual","title":"Transducers.Dedupe","text":"Dedupe()\n\nDe-duplicate consecutive items.\n\nThis API is modeled after dedupe in Clojure.\n\nExamples\n\njulia> using Transducers\n\njulia> collect(Dedupe(), [1, 1, 2, 1, 3, 3, 2])\n5-element Array{Int64,1}:\n 1\n 2\n 1\n 3\n 2\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.Drop","page":"Manual","title":"Transducers.Drop","text":"Drop(n)\n\nDrop first n items.\n\nThis API is modeled after drop in Clojure.\n\nExamples\n\njulia> using Transducers\n\njulia> collect(Drop(3), 1:5)\n2-element Array{Int64,1}:\n 4\n 5\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.DropLast","page":"Manual","title":"Transducers.DropLast","text":"DropLast(n)\n\nDrop last n items.\n\nThis API is modeled after drop-last in Clojure.\n\nExamples\n\njulia> using Transducers\n\njulia> collect(DropLast(2), 1:5)\n3-element Array{Int64,1}:\n 1\n 2\n 3\n\njulia> collect(DropLast(2), 1:1) == []\ntrue\n\njulia> collect(DropLast(2), 1:0) == []\ntrue\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.DropWhile","page":"Manual","title":"Transducers.DropWhile","text":"DropWhile(pred)\n\nDrop items while pred returns true consecutively.  It becomes a no-op after pred returns a false.\n\nThis API is modeled after drop-while in Clojure.\n\nExamples\n\njulia> using Transducers\n\njulia> collect(DropWhile(x -> x < 3), [1:5; 1:2])\n5-element Array{Int64,1}:\n 3\n 4\n 5\n 1\n 2\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.Enumerate","page":"Manual","title":"Transducers.Enumerate","text":"Enumerate([start[, step]])\n\nTransducer variant of Base.enumerate. The start and step arguments are optional and have the same meaning as in Count.\n\nExamples\n\njulia> using Transducers\n\njulia> collect(Enumerate(), [\"A\", \"B\", \"C\"])\n3-element Array{Tuple{Int64,String},1}:\n (1, \"A\")\n (2, \"B\")\n (3, \"C\")\n\njulia> start=2; step=3;\n\njulia> collect(Enumerate(start, step), [\"A\", \"B\", \"C\"])\n3-element Array{Tuple{Int64,String},1}:\n (2, \"A\")\n (5, \"B\")\n (8, \"C\")\n\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.Filter","page":"Manual","title":"Transducers.Filter","text":"Filter(pred)\n\nSkip items for which pred is evaluated to false.\n\nThis API is modeled after filter in Clojure.\n\nExamples\n\njulia> using Transducers\n\njulia> collect(Filter(iseven), 1:3)\n1-element Array{Int64,1}:\n 2\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.FlagFirst","page":"Manual","title":"Transducers.FlagFirst","text":"FlagFirst()\n\nOutput (isfirst, input) where isfirst::Bool is true only for the first iteration and input is the original input.\n\nSee also: IterTools.flagfirst\n\nExamples\n\njulia> using Transducers\n\njulia> collect(FlagFirst(), 1:3)\n3-element Array{Tuple{Bool,Int64},1}:\n (true, 1)\n (false, 2)\n (false, 3)\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.GroupBy","page":"Manual","title":"Transducers.GroupBy","text":"GroupBy(key, rf, [init])\nGroupBy(key, xf::Transducer, [step = right, [init]])\n\nGroup the input stream by a function key and then fan-out each group of key-value pairs to the reducing function rf.  For example, if GroupBy is composed as follows\n\nMap(upstream) |> GroupBy(key, rf, init) |> Map(downstream)\n\nthen the \"function signatures\" would be:\n\nupstream(_) :: V\nkey(::V) :: K\nrf(::Y, ::Pair{K, V}) ::Y\ndownstream(::Dict{K, Y})\n\nThat is to say,\n\nOuput of the upstream is fed into the function key that produces the group key (of type K).\nFor each new group key, a new transducible process is started with the initial state init :: Y (which is shared by all transducible processes).\nAfter one \"nested\" reducing function rf is called, the intermediate result dictionary (of type Dict{K, Y}) accumulating the previous results is then fed into the downstream.\n\nSee also groupreduce in SplitApplyCombine.jl.\n\ncompat: Transducers.jl 0.3\nNew in version 0.3.\n\nExamples\n\njulia> using Transducers\n       using BangBang  # for `push!!`\n\njulia> foldl(right, GroupBy(string, Map(last), push!!), [1, 2, 1, 2, 3])\nDict{String,Array{Int64,1}} with 3 entries:\n  \"1\" => [1, 1]\n  \"2\" => [2, 2]\n  \"3\" => [3]\n\nNote that the reduction stops if one of the group returns a reduced.  This can be used, for example, to find if there is a group with a sum grater than 3 and stop the computation as soon as it is find:\n\njulia> result = transduce(\n           GroupBy(\n               string,\n               Map(last) |> Scan(+) |> ReduceIf(x -> x > 3),\n           ),\n           right,\n           nothing,\n           [1, 2, 1, 2, 3],\n       );\n\njulia> result isa Reduced\ntrue\n\njulia> unreduced(result)\nDict{String,Int64} with 2 entries:\n  \"1\" => 2\n  \"2\" => 4\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.Interpose","page":"Manual","title":"Transducers.Interpose","text":"Interpose(sep)\n\nInterleave input items with a sep.\n\nThis API is modeled after interpose in Clojure.\n\nExamples\n\njulia> using Transducers\n\njulia> collect(Interpose(missing), 1:3)\n5-element Array{Union{Missing, Int64},1}:\n 1\n  missing\n 2\n  missing\n 3\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.Iterated","page":"Manual","title":"Transducers.Iterated","text":"Iterated(f, init)\n\nGenerate a sequence init, f(init), f(f(init)), f(f(f(init))), and so on.\n\nNote that input is ignored.  To use the input in the downstream reduction steps, use Zip.\n\nPass OnInit or CopyInit object to init for creating a dedicated (possibly mutable) state for each fold.\n\nSee also: Scan, ScanEmit.\n\nThe idea is taken from IterTools.iterated\n\nExamples\n\njulia> using Transducers\n\njulia> collect(Iterated(x -> 2x, 1), 1:5)\n5-element Array{Int64,1}:\n  1\n  2\n  4\n  8\n 16\n\njulia> collect(Zip(Map(identity), Iterated(x -> 2x, 1)), 1:5)\n5-element Array{Tuple{Int64,Int64},1}:\n (1, 1)\n (2, 2)\n (3, 4)\n (4, 8)\n (5, 16)\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.Keep","page":"Manual","title":"Transducers.Keep","text":"Keep(f)\n\nPass non-nothing output of f to the inner reducing step.\n\nThis API is modeled after keep in Clojure.\n\nExamples\n\njulia> using Transducers\n\njulia> xf = Keep() do x\n           if x < 3\n               x + 1\n           end\n       end;\n\njulia> collect(xf, 1:5)\n2-element Array{Int64,1}:\n 2\n 3\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.Map","page":"Manual","title":"Transducers.Map","text":"Map(f)\n\nApply unary function f to each input and pass the result to the inner reducing step.\n\nThis API is modeled after map in Clojure.\n\nExamples\n\njulia> using Transducers\n\njulia> collect(Map(x -> 2x), 1:3)\n3-element Array{Int64,1}:\n 2\n 4\n 6\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.MapCat","page":"Manual","title":"Transducers.MapCat","text":"MapCat(f)\n\nConcatenate output of f which is expected to return an iterable.\n\nThis API is modeled after mapcat in Clojure.\n\nExamples\n\njulia> using Transducers\n\njulia> collect(MapCat(x -> 1:x), 1:3)\n6-element Array{Int64,1}:\n 1\n 1\n 2\n 1\n 2\n 3\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.MapSplat","page":"Manual","title":"Transducers.MapSplat","text":"MapSplat(f)\n\nLike Map(f) but calls f(input...) for each input and then pass the result to the inner reducing step.\n\nExamples\n\njulia> using Transducers\n\njulia> collect(MapSplat(*), zip(1:3, 10:10:30))\n3-element Array{Int64,1}:\n 10\n 40\n 90\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.NotA","page":"Manual","title":"Transducers.NotA","text":"NotA(T)\n\nSkip items of type T.  Unlike Filter(!ismissing), downstream transducers can have a correct type information for NotA(Missing).\n\nSee also: OfType\n\nExamples\n\njulia> using Transducers\n\njulia> collect(NotA(Missing), [1, missing, 2])\n2-element Array{Int64,1}:\n 1\n 2\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.OfType","page":"Manual","title":"Transducers.OfType","text":"OfType(T)\n\nInclude only items of type T.\n\nSee also: NotA\n\nExamples\n\njulia> using Transducers\n\njulia> collect(OfType(Int), [1, missing, 2])\n2-element Array{Int64,1}:\n 1\n 2\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.Partition","page":"Manual","title":"Transducers.Partition","text":"Partition(size, step = size, flush = false)\nPartition(size; step = size, flush = false)\n\nSliding window of width size and interval step.\n\nwarning: Warning\nThe vector passed to the inner reducing function is valid only during its immediate reduction step.  It must be reduced immediately or copied.\n\nThis API is modeled after partition-all in Clojure.\n\nExamples\n\njulia> using Transducers\n\njulia> collect(Partition(3) |> Map(copy), 1:8)\n2-element Array{Array{Int64,1},1}:\n [1, 2, 3]\n [4, 5, 6]\n\njulia> collect(Partition(3; flush=true) |> Map(copy), 1:8)\n3-element Array{Array{Int64,1},1}:\n [1, 2, 3]\n [4, 5, 6]\n [7, 8]\n\njulia> collect(Partition(3; step=1) |> Map(copy), 1:8)\n6-element Array{Array{Int64,1},1}:\n [1, 2, 3]\n [2, 3, 4]\n [3, 4, 5]\n [4, 5, 6]\n [5, 6, 7]\n [6, 7, 8]\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.PartitionBy","page":"Manual","title":"Transducers.PartitionBy","text":"PartitionBy(f)\n\nGroup input sequence into chunks in which f returns a same value consecutively.\n\nwarning: Warning\nThe vector passed to the inner reducing function is valid only during its immediate reduction step.  It must be reduced immediately or copied.\n\nThis API is modeled after partition-by in Clojure.\n\nExamples\n\njulia> using Transducers\n\njulia> collect(PartitionBy(x -> (x + 1) ÷ 3) |> Map(copy), 1:9)\n4-element Array{Array{Int64,1},1}:\n [1]\n [2, 3, 4]\n [5, 6, 7]\n [8, 9]\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.ReduceIf","page":"Manual","title":"Transducers.ReduceIf","text":"ReduceIf(pred)\n\nStop fold when pred(x) returns true for the output x of the upstream transducer.\n\nExamples\n\njulia> using Transducers\n\njulia> foldl(right, ReduceIf(x -> x == 3), 1:10)\n3\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.Replace","page":"Manual","title":"Transducers.Replace","text":"Replace(assoc)\n\nReplace each input with the value in the associative container assoc (e.g., a dictionary, array, string) if it matches with a key/index. Otherwise output the input as-is.\n\nThis API is modeled after replace in Clojure.\n\nExamples\n\njulia> using Transducers\n\njulia> collect(Replace(Dict('a' => 'A')), \"abc\")\n3-element Array{Char,1}:\n 'A'\n 'b'\n 'c'\n\njulia> collect(Replace([:a, :b, :c]), 0:4)\n5-element Array{Any,1}:\n 0\n  :a\n  :b\n  :c\n 4\n\njulia> collect(Replace(\"abc\"), 0:4)\n5-element Array{Any,1}:\n 0\n  'a'\n  'b'\n  'c'\n 4\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.Scan","page":"Manual","title":"Transducers.Scan","text":"Scan(f, [init = Init])\n\nAccumulate input with binary function f and pass the accumulated result so far to the inner reduction step.\n\nThe inner reducing step receives the sequence y₁, y₂, y₃, ..., yₙ, ... when the sequence x₁, x₂, x₃, ..., xₙ, ... is fed to Scan(f).\n\ny₁ = f(init, x₁)\ny₂ = f(y₁, x₂)\ny₃ = f(y₂, x₃)\n...\nyₙ = f(yₙ₋₁, xₙ)\n\nThis is a generalized version of the prefix sum also known as cumulative sum, inclusive scan, or scan.\n\nNote that the associativity of f is not required when the transducer is used in a process that gurantee an order, such as mapfoldl.\n\nUnless f is a function with known identity element such as +, *, min, max, and append!, the initial state init must be provided.\n\nPass OnInit or CopyInit object to init for creating a dedicated (possibly mutable) state for each fold.\n\nSee also: ScanEmit, Iterated.\n\nExamples\n\njulia> using Transducers\n\njulia> collect(Scan(*), 1:3)\n3-element Array{Int64,1}:\n 1\n 2\n 6\n\njulia> collect(Map(x -> x + im) |> Scan(*), 1:3)\n3-element Array{Complex{Int64},1}:\n 1 + 1im\n 1 + 3im\n 0 + 10im\n\njulia> collect(Scan(*, 10), 1:3)\n3-element Array{Int64,1}:\n 10\n 20\n 60\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.ScanEmit","page":"Manual","title":"Transducers.ScanEmit","text":"ScanEmit(f, init[, onlast])\n\nAccumulate input x with a function f with the call signature (u, x) -> (y, u) and pass the result y to the inner reduction step.\n\nThe inner reducing step receives the sequence y₁, y₂, y₃, ..., yₙ, ... computed as follows\n\nu₀ = init\ny₁, u₁ = f(u₀, x₁)\ny₂, u₂ = f(u₁, x₂)\ny₃, u₃ = f(u₂, x₃)\n...\nyₙ, uₙ = f(uₙ₋₁, xₙ)\n...\nyₒₒ = onlast(uₒₒ)\n\nwhen the sequence x₁, x₂, x₃, ..., xₙ, ... is fed to ScanEmit(f).\n\nPass OnInit or CopyInit object to init for creating a dedicated (possibly mutable) state for each fold.\n\nSee also: ScanEmit, Iterated.\n\nExamples\n\njulia> using Transducers\n\njulia> collect(ScanEmit(tuple, 0), 1:3)\n3-element Array{Int64,1}:\n 0\n 1\n 2\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.Take","page":"Manual","title":"Transducers.Take","text":"Take(n)\n\nTake n items from the input sequence.\n\nThis API is modeled after take in Clojure.\n\nExamples\n\njulia> using Transducers\n\njulia> collect(Take(2), 1:10)\n2-element Array{Int64,1}:\n 1\n 2\n\njulia> collect(Take(5), 1:2)\n2-element Array{Int64,1}:\n 1\n 2\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.TakeLast","page":"Manual","title":"Transducers.TakeLast","text":"TakeLast(n)\n\nTake last n items from the input sequence.\n\nExamples\n\njulia> using Transducers\n\njulia> collect(TakeLast(2), 1:10)\n2-element Array{Int64,1}:\n  9\n 10\n\njulia> collect(TakeLast(5), 1:2)\n2-element Array{Int64,1}:\n 1\n 2\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.TakeNth","page":"Manual","title":"Transducers.TakeNth","text":"TakeNth(n)\n\nOutput every n item to the inner reducing step.\n\nThis API is modeled after take-nth in Clojure.\n\nExamples\n\njulia> using Transducers\n\njulia> collect(TakeNth(3), 1:9)\n3-element Array{Int64,1}:\n 1\n 4\n 7\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.TakeWhile","page":"Manual","title":"Transducers.TakeWhile","text":"TakeWhile(pred)\n\nTake items while pred returns true.  Abort the reduction when pred returns false for the first time.\n\nThis API is modeled after take-while in Clojure.\n\nExamples\n\njulia> using Transducers\n\njulia> collect(TakeWhile(x -> x < 3), [1, 2, 3, 1, 2])\n2-element Array{Int64,1}:\n 1\n 2\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.Unique","page":"Manual","title":"Transducers.Unique","text":"Unique()\n\nPass only unseen item to the inner reducing step.\n\nThis API is modeled after distinct in Clojure.\n\nExamples\n\njulia> using Transducers\n\njulia> collect(Unique(), [1, 1, 2, 1, 3, 3, 2])\n3-element Array{Int64,1}:\n 1\n 2\n 3\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.Zip-Tuple","page":"Manual","title":"Transducers.Zip","text":"Zip(xforms...)\n\nZip outputs of transducers xforms in a tuple and pass it to the inner reduction step.\n\nwarning: Warning\nHead transducers drive tail transducers.  Be careful when using it with transducers other than Map, especially the contractive ones like PartitionBy and the expansive ones like MapCat.\n\nExamples\n\njulia> using Transducers\n\njulia> collect(Zip(Map(identity), Map(x -> 10x), Map(x -> 100x)), 1:3)\n3-element Array{Tuple{Int64,Int64,Int64},1}:\n (1, 10, 100)\n (2, 20, 200)\n (3, 30, 300)\n\n\n\n\n\n","category":"method"},{"location":"manual/#Experimental-1","page":"Manual","title":"Experimental","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"Transducers.TeeZip\nTransducers.GetIndex\nTransducers.SetIndex\nTransducers.Inject","category":"page"},{"location":"manual/#Transducers.TeeZip","page":"Manual","title":"Transducers.TeeZip","text":"TeeZip(xform::Transducer)\n\nBranch input into two \"flows\", inject one into xform and then merge the output of xform with the original input.\n\nwarning: Warning\nThis API is experimental.  Backward incompatible change, including the removal of this API, is more likely to occur than other parts of this package.\n\nTo illustrate how it works, consider the following usage\n\nxf0 |> TeeZip(xf1) |> xf2\n\nwhere xf0, xf1, and xf2 are some transducers.  Schematically, the output yn from xfn flows as follows:\n\nxf0      xf1                       xf2\n---- y0 ------ y1 ---.-- (y0, y1) ----->\n      |              |\n       `-------------'\n    \"Tee\"          \"Zip\"\n\nExamples\n\njulia> using Transducers\n       using Transducers: TeeZip\n\njulia> collect(TeeZip(Filter(isodd) |> Map(x -> x + 1)), 1:5)\n3-element Array{Tuple{Int64,Int64},1}:\n (1, 2)\n (3, 4)\n (5, 6)\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.GetIndex","page":"Manual","title":"Transducers.GetIndex","text":"GetIndex(array)\nGetIndex{inbounds}(array)\n\nTransform an integer input i to array[i].\n\nwarning: Warning\nThis API is experimental.  Backward incompatible change, including the removal of this API, is more likely to occur than other parts of this package.\n\nExamples\n\njulia> using Transducers\n       using Transducers: GetIndex\n\njulia> collect(GetIndex(1:10), [2, 3, 4])\n3-element Array{Int64,1}:\n 2\n 3\n 4\n\njulia> collect(GetIndex{true}(1:10), [2, 3, 4])\n3-element Array{Int64,1}:\n 2\n 3\n 4\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.SetIndex","page":"Manual","title":"Transducers.SetIndex","text":"SetIndex(array)\nSetIndex{inbounds}(array)\n\nPerform array[i] = v for each input pair (i, v).\n\nwarning: Warning\nThis API is experimental.  Backward incompatible change, including the removal of this API, is more likely to occur than other parts of this package.\n\nExamples\n\njulia> using Transducers\n       using Transducers: SetIndex\n\njulia> ys = zeros(3);\n\njulia> mapfoldl(SetIndex(ys), first ∘ tuple, [(1, 11.1), (3, 33.3)], init=nothing)\n\njulia> ys\n3-element Array{Float64,1}:\n 11.1\n  0.0\n 33.3\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.Inject","page":"Manual","title":"Transducers.Inject","text":"Inject(iterator)\n\nInject the output from iterator to the stream processed by the inner reduction step.\n\nwarning: Warning\nThis API is experimental.  Backward incompatible change, including the removal of this API, is more likely to occur than other parts of this package.\n\nExamples\n\njulia> using Transducers\n       using Transducers: Inject\n\njulia> collect(Inject(Iterators.cycle(\"hello\")), 1:8)\n8-element Array{Tuple{Int64,Char},1}:\n (1, 'h')\n (2, 'e')\n (3, 'l')\n (4, 'l')\n (5, 'o')\n (6, 'h')\n (7, 'e')\n (8, 'l')\n\njulia> collect(Inject(Iterators.repeated([1 2])), 1:4)\n4-element Array{Tuple{Int64,Array{Int64,2}},1}:\n (1, [1 2])\n (2, [1 2])\n (3, [1 2])\n (4, [1 2])\n\njulia> collect(Inject(Iterators.product(1:2, 3:5)), 1:100)\n6-element Array{Tuple{Int64,Tuple{Int64,Int64}},1}:\n (1, (1, 3))\n (2, (2, 3))\n (3, (1, 4))\n (4, (2, 4))\n (5, (1, 5))\n (6, (2, 5))\n\n\n\n\n\n","category":"type"},{"location":"manual/#Early-termination-1","page":"Manual","title":"Early termination","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"Reduced\nreduced\nunreduced\nifunreduced","category":"page"},{"location":"manual/#Transducers.Reduced","page":"Manual","title":"Transducers.Reduced","text":"Reduced\n\nThe type signaling transducible processes to abort.\n\nnote: Note\nCall reduced function for aborting the transducible process since reduced makes sure x is not doubly wrapped.  Reduced is meant to be used as x isa Reduced for checking if the result from transduce is due to early termination.\n\nSee reduced, unreduced.\n\nExamples\n\njulia> using Transducers\n\njulia> function step_demo(y, x)\n           if x > 5\n               return reduced(y)\n           else\n               return y + x\n           end\n       end;\n\njulia> result = transduce(Map(identity), Completing(step_demo), 0, 1:10)\nReduced(15)\n\njulia> result isa Reduced\ntrue\n\njulia> unreduced(result)\n15\n\njulia> result = transduce(Map(identity), Completing(step_demo), 0, 1:4)\n10\n\njulia> result isa Reduced\nfalse\n\njulia> unreduced(result)\n10\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.reduced","page":"Manual","title":"Transducers.reduced","text":"reduced([x = nothing])\n\nStop transducible process with the final value x (default: nothing).  Return x as-is if it already is a reduced value.\n\nSee Reduced, unreduced.\n\nThis API is modeled after ensure-reduced in Clojure.\n\nExamples\n\njulia> using Transducers\n\njulia> foldl(Enumerate(), \"abcdef\"; init=0) do y, (i, x)\n           if x == 'd'\n               return reduced(y)\n           end\n           return y + i\n       end\n6\n\njulia> foreach(Enumerate(), \"abc\") do (i, x)\n           println(i, ' ', x)\n           if x == 'b'\n               return reduced()\n           end\n       end;\n1 a\n2 b\n\n\n\n\n\n","category":"function"},{"location":"manual/#Transducers.unreduced","page":"Manual","title":"Transducers.unreduced","text":"unreduced(x)\n\nUnwrap x if it is a Reduced; do nothing otherwise.\n\nSee Reduced, reduced.\n\nThis API is modeled after unreduced in Clojure.\n\n\n\n\n\n","category":"function"},{"location":"manual/#Transducers.ifunreduced","page":"Manual","title":"Transducers.ifunreduced","text":"ifunreduced(f, [x])\n\nEquivalent to unreduced(x) if x is a Reduced; otherwise run f(x).  Return a curried version if x is not provided.\n\nSee: foreach.\n\nExamples\n\njulia> using Transducers\n\njulia> 1 |> ifunreduced() do x\n           println(\"called with x = \", x)\n       end\ncalled with x = 1\n\njulia> reduced(1) |> ifunreduced() do x\n           println(\"called with x = \", x)\n       end\n1\n\nNotice that nothing is printed in the last example.\n\nImplementation\n\nifunreduced(f) = x -> ifunreduced(f, x)\nifunreduced(f, x::Reduced) = unreduced(x)\nifunreduced(f, x) = f(x)\n\n\n\n\n\n","category":"function"},{"location":"manual/#Miscellaneous-1","page":"Manual","title":"Miscellaneous","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"Transducer(::Transducers.Comprehension)\nTransducer(::OnlineStats.OnlineStat)\nreducingfunction\nCompleting\nOnInit\nCopyInit\nright\nsetinput\nAdHocFoldable","category":"page"},{"location":"manual/#Transducers.Transducer-Tuple{Union{Generator, Filter, Flatten}}","page":"Manual","title":"Transducers.Transducer","text":"Transducer(iterator::Iterators.Generator)\nTransducer(iterator::Iterators.Filter)\nTransducer(iterator::Iterators.Flatten)\n\nExtract \"processing\" part of an iterator as a Transducer.  The \"data source\" iterator (i.e., xs in (f(x) for x in xs)) is ignored and nothing must be used as a place holder (i.e., (f(x) for x in nothing)).\n\nSee also eduction.\n\ncompat: Transducers.jl 0.3\nNew in version 0.3.\n\nExamples\n\njulia> using Transducers\n\njulia> xf1 = Transducer(2x for x in nothing if x % 2 == 0);\n\njulia> xf2 = Filter(x -> x % 2 == 0) |> Map(x -> 2x);  # equivalent\n\njulia> xs = 1:10\n       collect(xf1, xs) == collect(xf2, xs)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/#Transducers.Transducer-Tuple{OnlineStatsBase.OnlineStat}","page":"Manual","title":"Transducers.Transducer","text":"Transducer(o::OnlineStat)\n\nUse an OnlineStat as a stateful transducer.\n\nIt is implemented as:\n\nScan(fit!, CopyInit(o)) |> Map(value)\n\nExamples\n\njulia> using Transducers\n       using OnlineStats: Mean\n\njulia> collect(Transducer(Mean()), 1:4)\n4-element Array{Float64,1}:\n 1.0\n 1.5\n 2.0\n 2.5\n\n\n\n\n\n","category":"method"},{"location":"manual/#Transducers.reducingfunction","page":"Manual","title":"Transducers.reducingfunction","text":"reducingfunction(xf, step; simd)\n\nApply transducer xf to the reducing function step to create a new reducing function.\n\ncompat: Transducers.jl 0.3\nNew in version 0.3.\n\nwarning: Warning\nBe careful using reducingfunction with stateful transducers like Scan with mutable init (e.g., Scan(push!, [])).  See more in Examples below.\n\nArguments\n\nxf::Transducer: A transducer.\nstep: A callable which accepts 1 and 2 arguments.  If it only accepts 2 arguments, wrap it with Completing to \"add\" 1-argument form (i.e., complete protocol).\n\nKeyword Arguments\n\nsimd: false, true, or :ivdep. See maybe_usesimd.\n\nExamples\n\njulia> using Transducers\n\njulia> rf = reducingfunction(Map(x -> x + 1), *);\n\njulia> rf(10, 2) === 10 * (2 + 1)\ntrue\n\nWarning: Be careful when using reducingfunction with stateful transducers\n\nStateful Transducers themselves in Transducers.jl are not inherently broken with reducingfunction.  However, it can produce incorrect results when combined with mutable states:\n\njulia> scan_state = [];\n\njulia> rf_bad = reducingfunction(Scan(push!, scan_state) |> Cat(), string);\n\njulia> transduce(rf_bad, \"\", 1:3)\n\"112123\"\n\nThe first run works.  However, observe that the vector scan_state is not empty anymore:\n\njulia> scan_state\n3-element Array{Any,1}:\n 1\n 2\n 3\n\nThus, the second run produces an incorrect result:\n\njulia> transduce(rf_bad, \"\", 1:3)\n\"123112312123123\"\n\nOne way to solve this issue is to use CopyInit or OnInit.\n\njulia> scan_state = CopyInit([])\nCopyInit(Any[])\n\njulia> rf_good = reducingfunction(Scan(push!, scan_state) |> Cat(), string);\n\njulia> transduce(rf_good, \"\", 1:3)\n\"112123\"\n\njulia> scan_state\nCopyInit(Any[])\n\njulia> transduce(rf_good, \"\", 1:3)\n\"112123\"\n\n\n\n\n\n","category":"function"},{"location":"manual/#Transducers.Completing","page":"Manual","title":"Transducers.Completing","text":"Completing(function)\n\nWrap a function to add a no-op complete protocol.  Use it when passing a function without 1-argument arity to transduce etc.\n\nThis API is modeled after completing in Clojure.\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.OnInit","page":"Manual","title":"Transducers.OnInit","text":"OnInit(f)\n\nCall a callable f to create an initial value.\n\nSee also CopyInit.\n\nOnInit or CopyInit must be used whenever using in-place reduction with mapreduce.\n\nExamples\n\njulia> using Transducers\n\njulia> xf1 = Scan(push!, [])\nScan(push!, Any[])\n\njulia> mapfoldl(xf1, right, 1:3)\n3-element Array{Any,1}:\n 1\n 2\n 3\n\njulia> xf1\nScan(push!, Any[1, 2, 3])\n\nNotice that the array is stored in xf1 and mutated in-place.  As a result, second run of mapfoldl contains the results from the first run:\n\njulia> mapfoldl(xf1, right, 10:11)\n5-element Array{Any,1}:\n  1\n  2\n  3\n 10\n 11\n\nThis may not be desired.  To avoid this behavior, create an OnInit object which takes a factory function to create a new initial value.\n\njulia> xf2 = Scan(push!, OnInit(() -> []))\nScan(push!, OnInit(##9#10()))\n\njulia> mapfoldl(xf2, right, 1:3)\n3-element Array{Any,1}:\n 1\n 2\n 3\n\njulia> mapfoldl(xf2, right, [10.0, 11.0])\n2-element Array{Any,1}:\n 10.0\n 11.0\n\nKeyword argument init for transducible processes also accept an OnInit:\n\njulia> foldl(push!, Map(identity), \"abc\"; init=OnInit(() -> []))\n3-element Array{Any,1}:\n 'a'\n 'b'\n 'c'\n\nTo create a copy of a mutable object, CopyInit is easier to use.\n\nHowever, more powerful and generic pattern is to use push!! from BangBang.jl and initialize init with Union{}[] so that it automatically finds the minimal element type.\n\njulia> using BangBang\n\njulia> foldl(push!!, Map(identity), \"abc\"; init=Union{}[])\n3-element Array{Char,1}:\n 'a'\n 'b'\n 'c'\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.CopyInit","page":"Manual","title":"Transducers.CopyInit","text":"CopyInit(value)\n\nThis is equivalent to OnInit(() -> deepcopy(value)).\n\ncompat: Transducers.jl 0.3\nNew in version 0.3.\n\nExamples\n\njulia> using Transducers\n\njulia> init = CopyInit([]);\n\njulia> foldl(push!, Map(identity), 1:3; init=init)\n3-element Array{Any,1}:\n 1\n 2\n 3\n\njulia> foldl(push!, Map(identity), 1:3; init=init)  # `init` can be reused\n3-element Array{Any,1}:\n 1\n 2\n 3\n\n\n\n\n\n","category":"type"},{"location":"manual/#Transducers.right","page":"Manual","title":"Transducers.right","text":"right([l, ]r) -> r\n\nIt is simply defined as\n\nright(l, r) = r\nright(r) = r\n\nThis function is meant to be used as step argument for mapfoldl etc. for extracting the last output of the transducers.\n\ncompat: Transducers.jl 0.3\nInitial value must be manually specified.  In 0.2, it was automatically set to nothing.\n\nExamples\n\njulia> using Transducers\n\njulia> mapfoldl(Take(5), right, 1:10)\n5\n\njulia> mapfoldl(Drop(5), right, 1:3; init=0)  # using `init` as the default value\n0\n\n\n\n\n\n","category":"function"},{"location":"manual/#Transducers.setinput","page":"Manual","title":"Transducers.setinput","text":"setinput(ed::Eduction, coll)\n\nSet input collection of eduction ed to coll.\n\ncompat: Transducers.jl 0.3\nPreviously, setinput combined with eduction was a recommended way to use transducers in a type stable manner.  As of v0.3, all the foldl-like functions and eduction are type stable for many cases.  This workaround is no more necessary.\n\nExamples\n\njulia> using Transducers\n\njulia> ed = eduction(Map(x -> 2x), Float64[]);\n\njulia> xs = ones(2, 3);\n\njulia> foldl(+, setinput(ed, xs))\n12.0\n\n\n\n\n\n","category":"function"},{"location":"manual/#Transducers.AdHocFoldable","page":"Manual","title":"Transducers.AdHocFoldable","text":"AdHocFoldable(foldl, [collection = nothing])\n\nProvide a different way to fold collection without creating a wrapper type.\n\nArguments\n\nfoldl::Function: a function that implements __foldl__.\ncollection: a collection passed to the last argument of foldl.\n\nExamples\n\njulia> using Transducers\n       using Transducers: @next, complete\n       using ArgCheck\n\njulia> function uppertriangle(A::AbstractMatrix)\n           @argcheck !Base.has_offset_axes(A)\n           return AdHocFoldable(A) do rf, acc, A\n               for j in 1:size(A, 2), i in 1:min(j, size(A, 1))\n                   acc = @next(rf, acc, @inbounds A[i, j])\n               end\n               return complete(rf, acc)\n           end\n       end;\n\njulia> A = reshape(1:6, (3, 2))\n3×2 reshape(::UnitRange{Int64}, 3, 2) with eltype Int64:\n 1  4\n 2  5\n 3  6\n\njulia> collect(Map(identity), uppertriangle(A))\n3-element Array{Int64,1}:\n 1\n 4\n 5\n\njulia> function circularwindows(xs::AbstractVector, h::Integer)\n           @argcheck !Base.has_offset_axes(xs)\n           @argcheck h >= 0\n           @argcheck 2 * h + 1 <= length(xs)\n           return AdHocFoldable(xs) do rf, acc, xs\n               buffer = similar(xs, 2 * h + 1)\n               @inbounds for i in 1:h\n                   buffer[1:h - i + 1] .= @view xs[end - h + i:end]\n                   buffer[h - i + 2:end] .= @view xs[1:h + i]\n                   acc = @next(rf, acc, buffer)\n               end\n               for i in h + 1:length(xs) - h\n                   acc = @next(rf, acc, @inbounds @view xs[i - h:i + h])\n               end\n               @inbounds for i in 1:h\n                   buffer[1:end - i] .= @view xs[end - 2 * h + i:end]\n                   buffer[end - i + 1:end] .= @view xs[1:i]\n                   acc = @next(rf, acc, buffer)\n               end\n               return complete(rf, acc)\n           end\n       end;\n\njulia> collect(Map(collect), circularwindows(1:9, 2))\n9-element Array{Array{Int64,1},1}:\n [8, 9, 1, 2, 3]\n [9, 1, 2, 3, 4]\n [1, 2, 3, 4, 5]\n [2, 3, 4, 5, 6]\n [3, 4, 5, 6, 7]\n [4, 5, 6, 7, 8]\n [5, 6, 7, 8, 9]\n [6, 7, 8, 9, 1]\n [7, 8, 9, 1, 2]\n\njulia> expressions(str::AbstractString; kwargs...) =\n           AdHocFoldable(str) do rf, val, str\n               pos = 1\n               while true\n                   expr, pos = Meta.parse(str, pos;\n                                          raise = false,\n                                          depwarn = false,\n                                          kwargs...)\n                   expr === nothing && break\n                   val = @next(rf, val, expr)\n               end\n               return complete(rf, val)\n           end;\n\njulia> collect(Map(identity), expressions(\"\"\"\n       x = 1\n       y = 2\n       \"\"\"))\n2-element Array{Expr,1}:\n :(x = 1)\n :(y = 2)\n\njulia> counting = AdHocFoldable() do rf, acc, _\n           i = 0\n           while true\n               i += 1\n               acc = @next(rf, acc, i)\n           end\n       end;\n\njulia> foreach(counting) do i\n           @show i;\n           i == 3 && return reduced()\n       end;\ni = 1\ni = 2\ni = 3\n\n\n\n\n\n","category":"type"},{"location":"interface/#Transducer-interface-1","page":"Interface","title":"Transducer interface","text":"","category":"section"},{"location":"interface/#Core-interface-for-transducers-1","page":"Interface","title":"Core interface for transducers","text":"","category":"section"},{"location":"interface/#","page":"Interface","title":"Interface","text":"Transducers.Transducer\nTransducers.AbstractFilter\nTransducers.R_\nTransducers.inner\nTransducers.xform\nTransducers.start\nTransducers.next\nTransducers.@next\nTransducers.complete","category":"page"},{"location":"interface/#Transducers.Transducer","page":"Interface","title":"Transducers.Transducer","text":"Transducer\n\nThe abstract type for transducers.\n\n\n\n\n\n","category":"type"},{"location":"interface/#Transducers.AbstractFilter","page":"Interface","title":"Transducers.AbstractFilter","text":"AbstractFilter <: Transducer\n\nThe abstract type for filter-like transducers.\n\n\n\n\n\n","category":"type"},{"location":"interface/#Transducers.R_","page":"Interface","title":"Transducers.R_","text":"Transducers.R_{X}\n\nWhen defining a transducer type X, it is often required to dispatch on type rf::R_{X} (Reducing Function) which bundles the current transducer xform(rf)::X and the inner reducing function inner(rf)::R_.\n\n\n\n\n\n","category":"type"},{"location":"interface/#Transducers.inner","page":"Interface","title":"Transducers.inner","text":"Transducers.inner(rf::R_)\n\nReturn the inner reducing function of rf.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Transducers.xform","page":"Interface","title":"Transducers.xform","text":"Transducers.xform(rf::R_{X}) -> xf :: X\n\nReturn the transducer xf associated with rf.  Returned transducer xf is \"atomic\"; i.e., it is not a Composition transducer type.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Transducers.start","page":"Interface","title":"Transducers.start","text":"Transducers.start(rf::R_{X}, state)\n\nThis is an optional interface for a transducer.  Default implementation just calls start of the inner reducing function; i.e.,\n\nstart(rf::Reduction, result) = start(inner(rf), result)\n\nIf the transducer X is stateful, it can \"bundle\" its private state with wrap:\n\nstart(rf::R_{X}, result) = wrap(rf, PRIVATE_STATE, start(inner(rf), result))\n\nwhere PRIVATE_STATE is an initial value for the private state that can be used inside next via wrapping.\n\nSee Take, PartitionBy, etc. for real-world examples.\n\nSide notes: There is no related API in Clojure's Transducers. Transducers.jl uses it to implement stateful transducers using \"pure\" functions.  The idea is based on a slightly different approach taken in C++ Transducer library atria.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Transducers.next","page":"Interface","title":"Transducers.next","text":"Transducers.next(rf::R_{X}, state, input)\n\nThis is the only required interface.  It takes the following form (if start is not defined):\n\nnext(rf::R_{X}, result, input) =\n    # code calling next(inner(rf), result, possibly_modified_input)\n\nWhen calling next, it is almost always a better idea to use the macro form @next.  See the details in its documentation.\n\nSee Map, Filter, Cat, etc. for real-world examples.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Transducers.@next","page":"Interface","title":"Transducers.@next","text":"@next(rf, state, input)\n\nIt is expanded to\n\nresult = next(rf, state, input)\nresult isa Reduced && return result\nresult\n\nThis is usually the best way to call next as checking for Reduced is required to support early termination.\n\nSee also: next, Reduced, @return_if_reduced.\n\n\n\n\n\n","category":"macro"},{"location":"interface/#Transducers.complete","page":"Interface","title":"Transducers.complete","text":"Transducers.complete(rf::R_{X}, state)\n\nThis is an optional interface for a transducer.  If transducer X has some internal state, this is the last chance to \"flush\" the result.\n\nSee PartitionBy, etc. for real-world examples.\n\nIf start(rf::R_{X}, state) is defined, complete must unwarp state before returning state to the outer reducing function.\n\ncompat: Transducers.jl 0.3\nIn Transducers.jl 0.2, complete had a fallback implementation to automatically call unwrap when wrap is called in start. Relying on this fallback implementation is now deprecated.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Helpers-for-stateful-transducers-1","page":"Interface","title":"Helpers for stateful transducers","text":"","category":"section"},{"location":"interface/#","page":"Interface","title":"Interface","text":"Transducers.wrap\nTransducers.unwrap\nTransducers.wrapping","category":"page"},{"location":"interface/#Transducers.wrap","page":"Interface","title":"Transducers.wrap","text":"wrap(rf::R_{X}, state, iresult)\n\nPack private state for reducing function rf (or rather the transducer X) with the result iresult returned from the inner reducing function inner(rf).  This packed result is typically passed to the outer reducing function.\n\nThis is intended to be used only in start.  Inside next, use wrapping.\n\nnote: Implementation detail\nIf iresult is a Reduced, wrap actually unwraps all internal state iresult recursively.  However, this is an implementation detail that should not matter when writing transducers.\n\nConsider a reducing step constructed as\n\nrf = Reduction(xf₁ |> xf₂ |> xf₃, f)\n\nwhere each xfₙ is a stateful transducer and hence needs a private state stateₙ.  Then, calling start(rf, result)) is equivalent to\n\nwrap(rf,\n     state₁,                     # private state for xf₁\n     wrap(inner(rf),\n          state₂,                # private state for xf₂\n          wrap(inner(rf).inner,\n               state₃,           # private state for xf₃\n               result)))\n\nor equivalently\n\nresult₃ = result\nresult₂ = wrap(inner(inner(rf)), state₃, result₃)\nresult₁ = wrap(inner(rf),        state₂, result₂)\nresult₀ = wrap(rf,               state₁, result₁)\n\nThe inner most step function receives the original result as the first argument while transducible processes such as mapfoldl only sees the outer-most \"tree\" result₀ during the reduction.\n\nSee wrapping, unwrap, and start.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Transducers.unwrap","page":"Interface","title":"Transducers.unwrap","text":"unwrap(rf, result)\n\nUnwrap wraped result to a private state and inner result. Following identity holds:\n\nunwrap(rf, wrap(rf, state, iresult)) == (state, iresult)\n\nThis is intended to be used only in complete.  Inside next, use wrapping.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Transducers.wrapping","page":"Interface","title":"Transducers.wrapping","text":"wrapping(f, rf, result)\n\nFunction f must take two argument state and iresult, and return a tuple (state, iresult).  This is intended to be used only in next, possibly with a do block.\n\nnext(rf::R_{MyTransducer}, result, input) =\n    wrapping(rf, result) do my_state, iresult\n        # code calling `next(inner(rf), iresult, possibly_modified_input)`\n        return my_state, iresult  # possibly modified\n    end\n\nSee wrap, unwrap, and next.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Interface-for-reducibles-1","page":"Interface","title":"Interface for reducibles","text":"","category":"section"},{"location":"interface/#","page":"Interface","title":"Interface","text":"Transducers.__foldl__\nTransducers.@return_if_reduced","category":"page"},{"location":"interface/#Transducers.__foldl__","page":"Interface","title":"Transducers.__foldl__","text":"__foldl__(rf, init, reducible::T)\n\nLeft fold a reducible with reducing function rf and initial value init.  This is primary an API for overloading when the reducible \"container\" or \"context\" (e.g., I/O stream) of type T can provide a better reduction mechanism than the default iterator-based one.\n\nFor a simple iterable type MyType, a valid implementation is:\n\nfunction __foldl__(rf, val, itr::MyType)\n    for x in itr\n        val = @next(rf, val, x)\n    end\n    return complete(rf, val)\nend\n\nalthough in this case default __foldl__ can handle MyType and thus there is no need for defining it.  In general, defining __foldl__ is useful only when there is a better way to go over items in reducible than Base.iterate.\n\nSee also: @next.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Transducers.@return_if_reduced","page":"Interface","title":"Transducers.@return_if_reduced","text":"@return_if_reduced expr\n\nIt transforms the given expression to:\n\nval = expr\nval isa Reduced && return val\nval\n\nSee also @next.\n\ncompat: Transducers.jl 0.3\nIn v0.2, the calling convention was @return_if_reduced complete(rf, val) and it was transformed to val isa Reduced && return reduced(complete(rf, unreduced(val))).  For the rationale behind the change, see this commit message.\n\nExamples\n\njulia> using Transducers: @return_if_reduced\n\njulia> @macroexpand @return_if_reduced f(x)\nquote\n    #158#val = f(x)\n    #= ... =#\n    begin\n        #158#val isa Transducers.Reduced && return #158#val\n        #= ... =#\n        #158#val\n    end\nend\n\n\n\n\n\n","category":"macro"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"EditURL = \"https://github.com/tkf/Transducers.jl/blob/master/examples/tutorial_missings.jl\"","category":"page"},{"location":"examples/tutorial_missings/#Tutorial:-missing-value-handling-1","page":"Tutorial: Missing values","title":"Tutorial: missing value handling","text":"","category":"section"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"This tutorial illustrates the usage of Transducers.jl by stepping through various handling of missing values.","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"using Transducers","category":"page"},{"location":"examples/tutorial_missings/#Dot-product-1","page":"Tutorial: Missing values","title":"Dot product","text":"","category":"section"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"Here is a simple way to compute a dot product using mapfoldl and MapSplat:","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"mapfoldl(MapSplat(*), +, zip(1:3, 10:2:14))","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"Let's see what it does step by step.  First we create a \"printer\" transducer using the following function (see Map):","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"xf_printer(label) = Map() do x\n    println(label, \": \", x)\n    return x  # just return it as-is\nend\nnothing  # hide","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"This transducer just pass-through the input while printing its value (prefixed by a label).  Let's sandwich the previous MapSplat(*) with it:","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"mapfoldl(\n    xf_printer(\" input\") |> MapSplat(*) |> xf_printer(\"output\"),\n    +, zip(1:3, 10:2:14))\nflush(stdout)  # hide","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"You can see that the input tuple (1, 10) is splatted into function * by MapSplat which then outputs 10.  This is repeated for all inputs.","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"Perhaps unfortunately, this way of computing a dot product propagates any missing values contained in the input arrays to the result (which may actually be desired in certain cases).","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"xs = [1, missing, 3, 2]\nys = [10, 14, missing, 12]\nmapfoldl(MapSplat(*), +, zip(xs, ys))","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"However, it is very simple to ignore any missing values using OfType:","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"xf_mdot = OfType(Tuple{Vararg{Number}}) |> MapSplat(*)\nmapfoldl(xf_mdot, +, zip(xs, ys))","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"Here, Tuple{Vararg{Number}} is a type that matches with a tuple of any length with numbers.  It does not match with a tuple if it has a missing.","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"@assert (1, 0.5) isa Tuple{Vararg{Number}}\n@assert (1, 0.5, 2im) isa Tuple{Vararg{Number}}\n@assert !((1, missing) isa Tuple{Vararg{Number}})","category":"page"},{"location":"examples/tutorial_missings/#Covariance-1","page":"Tutorial: Missing values","title":"Covariance","text":"","category":"section"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"Transducer xf_mdot above can also be used to compute the covariance.  First, we need the number of pairs of elements in xs and ys that both of them are not missing:","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"nonmissings = mapfoldl(OfType(Tuple{Vararg{Number}}) |> Count(),\n                       right,\n                       zip(xs, ys);\n                       init = 0)\nnonmissings  # hide","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"@assert nonmissings == 2  # hide","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"We do this by using Count and right.  Count ignores input and count the number of times the input is provided. Since OfType(Tuple{Vararg{Number}}) provides the inputs to the downstream transducer only if there is no missing values, this correctly counts the number of non-missing pairs.  Function right is simply defined as right(l, r) = r (and right(r) = r).  Thus, the whole mapfoldl returns the last output of Count.  In case Count never gets called (i.e., there are no non-missing pairs), we pass init=0.","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"ans =  # hide\nmapfoldl(OfType(Tuple{Vararg{Number}}) |> Count(),\n         right,\n         zip(Int[], Int[]);\n         init = 0)\nans  # hide","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"@assert ans == 0  # hide","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"Finally, we have to pre-process the input to xf_mdot by subtracting the average.  It's easy to do with Map:","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"using Statistics: mean\n\nfunction xf_demean(xs, ys)\n    xmean = mean(skipmissing(xs))\n    ymean = mean(skipmissing(ys))\n    return Map(((x, y),) -> (x - xmean, y - ymean))\nend\n\nmapfoldl(xf_demean(xs, ys) |> xf_mdot, +, zip(xs, ys)) / nonmissings","category":"page"},{"location":"examples/tutorial_missings/#Addition-1","page":"Tutorial: Missing values","title":"Addition","text":"","category":"section"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"How do we use transducers for vector-to-vector transformation?  Here is a function to calculate y = x + y while ignoring missing values in x.  First, mandatory input shape check:","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"function add_skipmissing!(ys, xs)\n    length(ys) == length(xs) || error(\"length(ys) != length(xs)\")\n    firstindex(ys) == 1 || error(\"firstindex(ys) != 1\")","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"For filtering out missing values from xs while tracking indices, we use Enumerate and Filter.  To iterate over the output of the transducer, foreach is used instead of mapfoldl since mutating an array is better expressed as a side-effect than a fold.","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"    foreach(Enumerate() |> Filter(!(ismissing ∘ last)), xs) do (i, xi)\n        @inbounds ys[i] += xi\n    end","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"We then return the mutated value to behave like the rest of Julia functions (push!, mul!, etc.):","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"    return ys\nend\nnothing  # hide","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"Example:","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"ans =  # hide\nadd_skipmissing!([100, 110, 120], [1, missing, 2])","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"@assert ans == [101, 110, 122]  # hide","category":"page"},{"location":"examples/tutorial_missings/#Vectorized-reduction-1","page":"Tutorial: Missing values","title":"Vectorized reduction","text":"","category":"section"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"foldl, mapfoldl, etc. in Base support dims argument. Transducers.jl does not support this argument as of writing. However, this can easily be emulated using eachcol, eachrow, or eachslice iterators in Base.","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"xs = [\n    0       missing 1       2\n    3       4       5       missing\n    missing 6       7       missing\n]\n\nfunction xf_sum_columns(prototype)\n    T = Base.nonmissingtype(eltype(prototype)) # subtract Missing from type\n    dims = size(prototype)\n    return Scan(add_skipmissing!, CopyInit(zeros(T, dims)))\nend\nnothing  # hide","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"We use CopyInit here to allocate the \"output array\" into which the columns are added by add_skipmissing!.","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"ans =  # hide\nmapfoldl(xf_sum_columns(xs[:, 1]), right, eachcol(xs))","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"@assert ans == [3, 12, 13]  # hide","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"Above computation returns the sum over each row without taking into account the relationship within a column.  Another possibly useful reduction is the sum of the columns with no missing values.  This can easily be done by prepending a filter:","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"ans =  # hide\nmapfoldl(Filter(x -> !any(ismissing, x)) |> xf_sum_columns(xs[:, 1]),\n         right, eachcol(xs))\nans  # hide","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"@assert ans == [1, 5, 7]  # hide","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"Note that above combination of Scan and right is redundant.  For example, we can simply pass add_skipmissing! to \"normal\" foldl:","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"ans =  # hide\nfoldl(add_skipmissing!, eachcol(xs), init=zeros(Int, size(xs, 1)))","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"@assert ans == [3, 12, 13]  # hide","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"However, packaging it as a transducer is sometimes useful as it can be composed with other transducers and \"bottom\" reducing function. For example, vectorized version of cumsum can easily obtained by composing it with append! (and then reshape after mapfoldl):","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"result = mapfoldl(\n    xf_sum_columns(xs[:, 1]),\n    Completing(append!),\n    eachcol(xs);\n    init = Int[])\nans =  # hide\nreshape(result, (size(xs, 1), :))","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"@assert ans == [      # hide\n    0  0   1   3      # hide\n    3  7  12  12      # hide\n    0  6  13  13      # hide\n]                     # hide","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"Note that we need Completing here since append! does not have the unary method used for complete protocol.","category":"page"},{"location":"examples/tutorial_missings/#Argmax-1","page":"Tutorial: Missing values","title":"Argmax","text":"","category":"section"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"Another useful operation to do ignoring missing values is argmax/argmin.  It can be implemented using Enumerate() |> Filter(!(ismissing ∘ last)) (see also add_skipmissing! above) composed with ScanEmit.  We first need to define a function to be called by ScanEmit:","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"#                     ,--- current state\n#                     |\n#                     |              ,-- input\n#                     |              |\nfunction argmax_step((argmax, max), (index, value))\n    argmax, max = value > max ? (index, value) : (argmax, max)\n    return argmax, (argmax, max)\n    #       \\        \\\n    #        \\        \\__ next state\n    #         \\\n    #          \\__ output\nend\nnothing  # hide","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"This function is passed to ScanEmit with the initial state:","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"xf_argmax = Enumerate() |> Filter(!(ismissing ∘ last)) |>\n    ScanEmit(argmax_step, (0, typemin(Int)))\n#                          |\n#                   initial state\nnothing  # hide","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"As ScanEmit is one of the most complex (and powerful) transducer, it may require some comments on how above code works:","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"The state (argmax, max) is initialized to (0, typemin(Int)) in xf_argmax.  This is the first value passed to the first argument (argmax, max) of argmax_step.\nThe upstream transducer Enumerate() provides (index, value)-pair which becomes the input (the second argument) of argmax_step.\nFunction argmax_step must return a pair.  The first item becomes the output of ScanEmit.  In this case that's the index of the largest item seen so far.\nThe second item in the returned pair is fed back to argmax_step in the next call.","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"We have the argmax function by extracting the last output of xf_argmax:","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"mapfoldl(xf_argmax, right, [1, 3, missing, 2])","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"Side note: We use typemin(Int) as the initial value of max for simplicity.  In practice, it should be typemin(eltype(input_array)).  A more generic solution is to special-case the first invocation by using a singleton like nothing.  Julia can handle small Union type such as this (see the next section).  Another solution is to use Init(>) from InitialValues.jl.","category":"page"},{"location":"examples/tutorial_missings/#Extrema-1","page":"Tutorial: Missing values","title":"Extrema","text":"","category":"section"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"Transducer xf_argmax in the previous section only outputs the index of the maximum element so far.  To output the maximum element as well, we can simply use Scan.  Also, while we are at it, let's support both argmax and argmin.  To this end, we parametrize the function passed to Scan by the comparison function > and <.  Another problem with xf_argmax is that it does not handle non-Int input types.  To properly handle different input types, we initialize Scan's state with nothing and special-case the first invocation to return the input as-is.  Following function argext_step takes the function > or < and return a function appropriate for Scan.","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"argext_step(should_update) =\n    (old, (index, value)) ->\n        if old === nothing || should_update(old[2], value)\n            (index, value)\n        else\n            old\n        end\nnothing  # hide\n\nxf_scanext(should_update) = Scan(argext_step(should_update), nothing)\nnothing  # hide","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"Passing < gives us the argmax transducer:","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"ans = # hide\nmapfoldl(\n    Enumerate() |> OfType(Tuple{Integer, Number}) |> xf_scanext(<),\n    right, [1.0, 3.0, missing, 2.0])","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"@assert ans === (2, 3.0) # hide","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"We now have transducers xf_scanext(<) and xf_scanext(>) for argmax and argmin, respectively.  We can compute them concurrently by Zip'ing them together:","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"xf_fullextrema = Enumerate() |> OfType(Tuple{Integer, Number}) |>\n    Zip(xf_scanext(>), xf_scanext(<))\n\nans = # hide\nmapfoldl(xf_fullextrema, right, [1.0, 3.0, -1.0, missing, 2.0])","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"@assert ans === ((3, -1.0), (2, 3.0))  # hide","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"This transducer produces a tuple ((argmin, min), (argmax, max)). To output only indices, append an appropriate Map:","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"xf_argextrema =\n    xf_fullextrema |> Map() do ((argmin, min), (argmax, max))\n        (argmin, argmax)\n    end\n\nans = # hide\nmapfoldl(xf_argextrema, right, [1.0, 3.0, -1.0, missing, 2.0])","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"@assert ans === (3, 2)  # hide","category":"page"},{"location":"examples/tutorial_missings/#","page":"Tutorial: Missing values","title":"Tutorial: Missing values","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/empty_result_handling/#","page":"Empty result handling","title":"Empty result handling","text":"EditURL = \"https://github.com/tkf/Transducers.jl/blob/master/examples/empty_result_handling.jl\"","category":"page"},{"location":"examples/empty_result_handling/#Empty-result-handling-1","page":"Empty result handling","title":"Empty result handling","text":"","category":"section"},{"location":"examples/empty_result_handling/#","page":"Empty result handling","title":"Empty result handling","text":"Transducible processes foldl and mapfoldl try to do the right thing even when init is not given, if the given binary operation step is supported by InitialValues.jl (for example, +, *, &, and | are supported).  However, those functions throw an exception if the given collection is empty or filtered out by the transducers:","category":"page"},{"location":"examples/empty_result_handling/#","page":"Empty result handling","title":"Empty result handling","text":"using Transducers\n\nadd1(x) = x + 1\n\nerr = try                                                            # hide\nfoldl(*, Map(add1), [])\ncatch err; err; end                                                  # hide\nshowerror(stdout, err)                                           # hide","category":"page"},{"location":"examples/empty_result_handling/#","page":"Empty result handling","title":"Empty result handling","text":"To write robust code, it is recommended to use init if there is a reasonable default.  However, it may be useful to postpone \"materializing\" the result.  In such case, Init from InitialValues.jl can be used as a placeholder.","category":"page"},{"location":"examples/empty_result_handling/#","page":"Empty result handling","title":"Empty result handling","text":"using InitialValues\n\nresult = foldl(*, Map(add1), [], init=Init)\nnothing                                                              # hide","category":"page"},{"location":"examples/empty_result_handling/#","page":"Empty result handling","title":"Empty result handling","text":"init=Init is a short-hand notation of init=Init(*) (so that * does not have to be repeated):","category":"page"},{"location":"examples/empty_result_handling/#","page":"Empty result handling","title":"Empty result handling","text":"@assert result === foldl(*, Map(add1), [], init=Init(*))","category":"page"},{"location":"examples/empty_result_handling/#","page":"Empty result handling","title":"Empty result handling","text":"Note also that transduce can be used for passing init as a positional argument:","category":"page"},{"location":"examples/empty_result_handling/#","page":"Empty result handling","title":"Empty result handling","text":"@assert result === transduce(Map(add1), Completing(*), Init, [])","category":"page"},{"location":"examples/empty_result_handling/#","page":"Empty result handling","title":"Empty result handling","text":"Since the input collection [] is empty, result is Init(*) (which is an InitialValues.InitialValue):","category":"page"},{"location":"examples/empty_result_handling/#","page":"Empty result handling","title":"Empty result handling","text":"using InitialValues: InitialValue\n@assert result::InitialValue === Init(*)","category":"page"},{"location":"examples/empty_result_handling/#","page":"Empty result handling","title":"Empty result handling","text":"Init(*) is the left identity of *.  Multiplying it with any x from right returns x as-is.  This property may be useful, e.g., if result is known to be a scalar that is multiplied by a matrix just after the foldl:","category":"page"},{"location":"examples/empty_result_handling/#","page":"Empty result handling","title":"Empty result handling","text":"result * ones(2, 2)","category":"page"},{"location":"examples/empty_result_handling/#","page":"Empty result handling","title":"Empty result handling","text":"The identities Init(*) and Init(+) can be converted to numbers:","category":"page"},{"location":"examples/empty_result_handling/#","page":"Empty result handling","title":"Empty result handling","text":"convert(Int, Init(*))","category":"page"},{"location":"examples/empty_result_handling/#","page":"Empty result handling","title":"Empty result handling","text":"Init(*) can also be converted to a String:","category":"page"},{"location":"examples/empty_result_handling/#","page":"Empty result handling","title":"Empty result handling","text":"convert(String, Init(*))","category":"page"},{"location":"examples/empty_result_handling/#","page":"Empty result handling","title":"Empty result handling","text":"This means that no special code is required if the result is going to be stored into, e.g., an Array or a struct:","category":"page"},{"location":"examples/empty_result_handling/#","page":"Empty result handling","title":"Empty result handling","text":"xs = [true, true]\nxs[1] = Init(+)\nxs","category":"page"},{"location":"examples/empty_result_handling/#","page":"Empty result handling","title":"Empty result handling","text":"They can be converted into numbers also by using Integer:","category":"page"},{"location":"examples/empty_result_handling/#","page":"Empty result handling","title":"Empty result handling","text":"Integer(Init(+))","category":"page"},{"location":"examples/empty_result_handling/#","page":"Empty result handling","title":"Empty result handling","text":"or float:","category":"page"},{"location":"examples/empty_result_handling/#","page":"Empty result handling","title":"Empty result handling","text":"float(Init(*))","category":"page"},{"location":"examples/empty_result_handling/#","page":"Empty result handling","title":"Empty result handling","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"EditURL = \"https://github.com/tkf/Transducers.jl/blob/master/examples/words.jl\"","category":"page"},{"location":"examples/words/#Splitting-a-string-into-words-and-counting-them-in-parallel-1","page":"Parallel word count","title":"Splitting a string into words and counting them in parallel","text":"","category":"section"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"We start from the parallel algorithm presented in Guy Steele's 2009 ICFP talk (video).  It splits a space-separated string into list of strings (words).  The repeating theme in the talk was to build \"singleton solutions\" and then merge them together using an associative function.  We will follow this guideline and slightly extend the algorithm.","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"It is highly recommended to just watch the talk for understanding the algorithm.  However, we briefly describe how it works.","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"When a certain contiguous region of a string is processed, we either already have seen at least one space or not.  These two states are tracked using following two types.  If there is no space so far, we only have a chunk of a possibly larger word (see example below):","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"struct Chunk\n    s::String\nend","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"If there are one or more spaces, (possibly zero) words that are already determined and left/right \"chunks\" have to be tracked separately:","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"struct Segment\n    l::String\n    A::Vector{String}\n    r::String\nend","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"Here is an example taken from the talk:","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"Segment(\"Here\", [\"is\", \"a\"], \"\")\n   |\n   |       Segment(\"lian\", [], \"string\")\n __|_____            _|______\n|        |          |        |\nHere is a sesquipedalian string of words\n          |________|          |________|\n   Chunk(\"sesquipeda\")        Segment(\"g\", [\"of\"], \"words\")","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"We then need a way to merge two results which can independently in one of the above two states.","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"⊕(x::Chunk, y::Chunk) = Chunk(x.s * y.s)\n⊕(x::Chunk, y::Segment) = Segment(x.s * y.l, y.A, y.r)\n⊕(x::Segment, y::Chunk) = Segment(x.l, x.A, x.r * y.s)\n⊕(x::Segment, y::Segment) =\n    Segment(x.l,\n            append!(append!(x.A, maybewordv(x.r * y.l)), y.A),\n            y.r)\n\nmaybewordv(s::String) = isempty(s) ? String[] : [s]\nnothing  # hide","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"Input is a sequence of Chars.  Each of them has to be converted into a \"singleton solution\" which can be merged with already aggregated (or another singleton) solution with ⊕:","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"segmentorchunk(c::Char) = c == ' ' ? Segment(\"\", [], \"\") : Chunk(string(c))\nnothing  # hide","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"Putting them together, we get:","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"function collectwords(s::String)\n    g = mapfoldl(segmentorchunk, ⊕, s; init=Segment(\"\", [], \"\"))\n    if g isa Char\n        return maybewordv(g.s)\n    else\n        return append!(append!(maybewordv(g.l), g.A), maybewordv(g.r))\n    end\nend\nnothing  # hide","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"Let's run a few tests covering some edge cases:","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"using Test\n@testset begin\n    @test collectwords(\"This is a sample\") == [\"This\", \"is\", \"a\", \"sample\"]\n    @test collectwords(\" Here is another sample \") == [\"Here\", \"is\", \"another\", \"sample\"]\n    @test collectwords(\"JustOneWord\") == [\"JustOneWord\"]\n    @test collectwords(\" \") == []\n    @test collectwords(\"\") == []\nend\nnothing  # hide","category":"page"},{"location":"examples/words/#String-splitting-transducer-1","page":"Parallel word count","title":"String-splitting transducer","text":"","category":"section"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"Let's try to make it re-usable by packaging it into transducers.","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"using Transducers","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"Rather than accumulating words into a vector, we are going to write a transducer that \"emits\" a word as soon as it is ready.  The downstream transducer may choose to record everything or only aggregate, e.g., reduced statistics.  To this end, we replace Segment in the original algorithm to","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"struct Vacant\n    l::String\n    r::String\nend","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"and output the words in the \"middle\" without accumulating it.  We use ScanEmit which requires an operator/function like ⊕ above but returning a pair of output and next state.  This function (extract below) must have the signature (S, S) -> (O, S) where S is the type for accumulated state and input and O is the output type.","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"extract(x::Chunk, y::Chunk) = (), Chunk(x.s * y.s)\nextract(x::Chunk, y::Vacant) = (), Vacant(x.s * y.l, y.r)\nextract(x::Vacant, y::Chunk) = (), Vacant(x.l, x.r * y.s)\nextract(x::Vacant, y::Vacant) = maybewordt(x.r * y.l), Vacant(x.l, y.r)\n\nmaybewordt(s) = isempty(s) ? () : (s,)\nnothing  # hide","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"maybewordt(x.r * y.l) in extract(x::Vacant, y::Vacant) is the \"emission\".","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"The words at the beginning and/or the end are not handled by extract.  This must be handled separately:","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"lastword(x::Chunk) = maybewordt(x.s)\nlastword(x::Vacant) = (maybewordt(x.r)..., maybewordt(x.l)...)\n\nvacantorchunk(c::Char) = c == ' ' ? Vacant(\"\", \"\") : Chunk(string(c))\n\nwordsxf = Map(vacantorchunk) |> ScanEmit(extract, Chunk(\"\"), lastword) |> Cat()","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"Test:","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"@testset begin\n    @test collect(wordsxf, \"This is a sample\") == [\"is\", \"a\", \"sample\", \"This\"]\n    @test collect(wordsxf, \" Here is another sample \") == [\"Here\", \"is\", \"another\", \"sample\"]\n    @test collect(wordsxf, \"JustOneWord\") == [\"JustOneWord\"]\n    @test collect(wordsxf, \" \") == []\n    @test collect(wordsxf, \"\") == []\nend\nnothing  # hide","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"Side note: In the first example, the first word This comes last. This is actually expected since both .l and .r are flushed in lastword which is called at the very end.  Here, This is stored in .l field.  If the order of the words is important, there are many possible fixes.  For example, extract and lastword can bundle information about the origin of the word (left vs middle-or-right).  Alternatively, perhaps the easiest solution is to insert a space in the beginning of input data.","category":"page"},{"location":"examples/words/#Word-counting-transducer-1","page":"Parallel word count","title":"Word-counting transducer","text":"","category":"section"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"We can pipe the resulting words into various transducers.","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"processcount(word) = Base.ImmutableDict(word => 1)\ncountxf = wordsxf |> Map(processcount)","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"Transducer countxf constructs a \"singleton solution\" as a dictionary which then accumulated with the associative reducing step function mergecont!:","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"mergecont!(a, b) = merge!(+, a, b)\nnothing  # hide","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"Putting the transducer and reducing function together, we get:","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"countwords(s; kwargs...) =\n    reduce(mergecont!,\n           countxf,\n           collect(s);\n           init = CopyInit(Dict{String,Int}()),\n           kwargs...)\nnothing  # hide","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"Side note: Since reduce does not support string, the input string is converted to a Vector{Char} first by collect.","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"Side note 2: We use CopyInit to create a fresh initial state for each sub-reduce to avoid overwriting mutable data between threads.","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"Side note 3: reduce wraps mergecont! automatically with Completing.  This is why mergecont! does not have to have the unary method.","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"Let's run some tests with different basesize (length(s) / basesize corresponds to number of tasks to be used):","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"@testset for basesize in [1, 2, 4]\n    @test countwords(\"This is a sample\", basesize=basesize) ==\n        Dict(\"This\" => 1, \"is\" => 1, \"a\" => 1, \"sample\" => 1)\n    @test countwords(\" Here is another sample \", basesize=basesize) ==\n        Dict(\"Here\" => 1, \"is\" => 1, \"another\" => 1, \"sample\" => 1)\n    @test countwords(\"JustOneWord\", basesize=basesize) ==\n        Dict(\"JustOneWord\" => 1)\n    @test countwords(\" \", basesize=basesize) == Dict()\n    @test countwords(\"\", basesize=basesize) == Dict()\n    @test countwords(\"aaa bb aaa aaa bb bb aaa\", basesize=basesize) ==\n        Dict(\"aaa\" => 4, \"bb\" => 3)\n    @test countwords(\"あああ いい あああ あああ いい いい あああ\", basesize=basesize) ==\n        Dict(\"あああ\" => 4, \"いい\" => 3)\nend\nnothing  # hide","category":"page"},{"location":"examples/words/#","page":"Parallel word count","title":"Parallel word count","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"EditURL = \"https://github.com/tkf/Transducers.jl/blob/master/examples/transducers.jl\"","category":"page"},{"location":"examples/transducers/#How-to-write-transducers-1","page":"Writing transducers","title":"How to write transducers","text":"","category":"section"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"Transducers don't export public interface for implementing transducers (and reducible collections).  Let's import some handy ones:","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"using Transducers\nusing Transducers: Transducer, R_, next, inner, xform","category":"page"},{"location":"examples/transducers/#Stateless-transducer-1","page":"Writing transducers","title":"Stateless transducer","text":"","category":"section"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"Let's write manually what Filter(x -> x isa Int) |> Map(x -> x + 1) would do:","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"struct AddOneIfInt <: Transducer end\n\nfunction Transducers.next(rf::R_{AddOneIfInt}, result, input)\n    if input isa Int","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"Output input + 1 is passed to the \"inner\" reducing step:","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"        next(inner(rf), result, input + 1)\n    else","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"Filtering out is done by \"doing nothing\"; return result-so-far as-is:","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"        result\n    end\nend","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"Ineed, for integer collection, it increments input by one:","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"addone_out1 = begin  # hide\ncollect(AddOneIfInt(), 1:5)\nend  # hide","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"Non integer elements are filtered out:","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"collect(AddOneIfInt(), Any[3, nothing, 2.0, missing, 5])","category":"page"},{"location":"examples/transducers/#Stateful-transducer-1","page":"Writing transducers","title":"Stateful transducer","text":"","category":"section"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"AddOneIfInt is a stateless transducer which is very easy to implement.  A stateful transducer needs a bit more code.","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"using Transducers: start, complete, wrap, unwrap, wrapping\nusing Random","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"Let's define a transducer that spits out a random past element from the buffer:","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"struct RandomRecall <: Transducer\n    history::Int\n    seed::Int\nend\nRandomRecall() = RandomRecall(3, 0)\nnothing  # hide","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"A stateful transducer needs to implement Transducers.start to \"allocate\" its private state.  Here, the private state is a buffer and a random number generator state rng:","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"function Transducers.start(rf::R_{RandomRecall}, result)\n    buffer = []\n    rng = MersenneTwister(xform(rf).seed)\n    private_state = (buffer, rng)\n    return wrap(rf, private_state, start(inner(rf), result))\nend","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"Stateful transducer needs to unwrap its private state inside Transducers.next and then re-wrap it.  There is a helper function Transducers.wrapping does that with the do block:","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"function Transducers.next(rf::R_{RandomRecall}, result, input)\n    wrapping(rf, result) do (buffer, rng), iresult","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"Pickup a random element to be passed to the inner reducing function. Replace it with the new incoming one in the buffer:","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"        if length(buffer) < xform(rf).history\n            push!(buffer, input)\n            iinput = rand(rng, buffer)\n        else\n            i = rand(rng, 1:length(buffer))\n            iinput = buffer[i]\n            buffer[i] = input\n        end","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"Call the inner reducing function.  Note that iresult unwrapped by Transducers.wrapping must be passed to next:","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"        iresult = next(inner(rf), iresult, iinput)\n        return (buffer, rng), iresult\n    end\nend","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"Any transducer with custom Transducers.start must have a corresponding Transducers.complete.  It is responsible for unwrapping the result and call the complete for the inner reducing function.","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"function Transducers.complete(rf::R_{RandomRecall}, result)\n    _private_state, inner_result = unwrap(rf, result)\n    return complete(inner(rf), inner_result)\nend","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"Here is how it works:","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"recall_out1 = begin  # hide\ncollect(RandomRecall(), 1:5)\nend  # hide","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"Indeed, it picks up some random elements from the past elements. With slightly more complex transducer:","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"collect(Filter(isodd) |> RandomRecall() |> Filter(x -> x > 10) |> Take(5), 1:100)","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"Note that Transducers.complete can do more than unwrap and complete.  It is useful for, e.g., flushing the buffer.","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"function Transducers.complete(rf::R_{RandomRecall}, result)\n    (buffer, _), iresult = unwrap(rf, result)\n    for x in buffer","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"Note that inner next can be called more than one time inside next and complete:","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"        iresult = next(inner(rf), iresult, x)\n    end","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"complete for inner reducing function must be called exactly once:","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"    return complete(inner(rf), iresult)\nend","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"This then adds 3 (= RandomRecall().history) more elements to the output:","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"recall_out2 = begin  # hide\ncollect(RandomRecall(), 1:5)\nend  # hide","category":"page"},{"location":"examples/transducers/#","page":"Writing transducers","title":"Writing transducers","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"EditURL = \"https://github.com/tkf/Transducers.jl/blob/master/examples/reducibles.jl\"","category":"page"},{"location":"examples/reducibles/#How-to-make-your-data-type-reducible-1","page":"Writing reducibles","title":"How to make your data type reducible","text":"","category":"section"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"Let's see how to make a vector-of-vector a reducible collection; i.e., a type that can be fed to mapfoldl.","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"struct VecOfVec{T}\n    vectors::Vector{Vector{T}}\nend","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"We need @next and complete to invoke the reducing function rf.","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"using Transducers\nusing Transducers: @next, complete","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"Supporting mapfoldl and similar only requires Transducers.__foldl__:","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"function Transducers.__foldl__(rf, val, vov::VecOfVec)\n    for vector in vov.vectors\n        for x in vector\n            val = @next(rf, val, x)\n        end\n    end\n    return complete(rf, val)\nend","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"Note that it's often a good idea to implement Base.eltype:","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"Base.eltype(::VecOfVec{T}) where {T} = T","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"It can be then used as the input to the transducers:","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"vov = VecOfVec(collect.([1:n for n in 1:3]))\ncollect(Map(identity), vov)","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"Macro @next is used instead of function next to avoid the boilerplate for supporting early termination (see the details in in @next documentation).  In practice, using @next means that your __foldl__ supports early termination:","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"collect(Take(3), vov)","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"More complex example:","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"collect(PartitionBy(isequal(1)) |> Zip(Map(copy), Map(sum)), vov)","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"Notice that writing Transducers.__foldl__ is very straightforward comparing to how to define an iterator:","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"function Base.iterate(vov::VecOfVec, state=(1, 1))","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"Iterator state is a tuple of an index i to vov.vectors and an index j to vov.vectors[i]:","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"    i, j = state","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"If i is larger than the number of items, we are done:","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"    i > length(vov.vectors) && return nothing","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"If j is in bound, we are iterating the same sub-vector:","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"    vi = vov.vectors[i]\n    if j <= length(vi)\n        return vi[j], (i, j + 1)\n    end","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"Otherwise, find the next non-empty sub-vector and start iterating it:","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"    for k in i + 1:length(vov.vectors)\n        vk = vov.vectors[k]\n        if !isempty(vk)\n            return vk[1], (k, 2)  # i=k, j=2\n        end\n    end\n    return nothing\nend\n\nBase.length(vov::VecOfVec) = sum(length, vov.vectors)\n\ncollect(vov)","category":"page"},{"location":"examples/reducibles/#","page":"Writing reducibles","title":"Writing reducibles","text":"This page was generated using Literate.jl.","category":"page"},{"location":"internals/#Internals-1","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"internals/#","page":"Internals","title":"Internals","text":"Modules = [Transducers]\nPublic = false\nFilter = Transducers.is_internal","category":"page"},{"location":"internals/#Transducers.AdHocXF","page":"Internals","title":"Transducers.AdHocXF","text":"AdHocXF(f, init, [onlast])\n\nExamples\n\njulia> using Transducers\n       using Transducers: AdHocXF, @next\n       using Setfield: @set!\n\njulia> flushlast(rf, result) = rf(@next(rf, result, result.state));\n\njulia> xf = AdHocXF(nothing, flushlast) do rf, result, input\n           m = match(r\"^name:(.*)\", input)\n           if m === nothing\n               push!(result.state.lines, input)\n               return result\n           else\n               chunk = result.state\n               @set! result.state = (name=strip(m.captures[1]), lines=String[])\n               push!(result.state.lines, input)\n               if chunk === nothing\n                   return result\n               else\n                   return rf(result, chunk)\n               end\n           end\n       end;\n\njulia> collect(xf, split(\"\"\"\n       name: Map\n       type: onetoone\n       name: Cat\n       type: expansive\n       name: Filter\n       type: contractive\n       name: Cat |> Filter\n       type: chaotic\n       \"\"\", \"\\n\"; keepempty=false))\n4-element Array{NamedTuple{(:name, :lines),Tuple{SubString{String},Array{String,1}}},1}:\n (name = \"Map\", lines = [\"name: Map\", \"type: onetoone\"])\n (name = \"Cat\", lines = [\"name: Cat\", \"type: expansive\"])\n (name = \"Filter\", lines = [\"name: Filter\", \"type: contractive\"])\n (name = \"Cat |> Filter\", lines = [\"name: Cat |> Filter\", \"type: chaotic\"])\n\n\n\n\n\n","category":"type"},{"location":"internals/#Transducers.DefaultInit","page":"Internals","title":"Transducers.DefaultInit","text":"DefaultInit(op)\n\nDefaultInit is like InitialValues.Init but strictly internal to Transducers.jl.  It is used for checking if the bottom reducing function is never called.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Transducers.UseSIMD","page":"Internals","title":"Transducers.UseSIMD","text":"UseSIMD{ivdep}()\n\nTell the reducible to run the inner reducing function using @simd. The reducible can support it using @simd_if.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Transducers._foldl_blockarray-Tuple{Any,Any,Any}","page":"Internals","title":"Transducers._foldl_blockarray","text":"_foldl_blockarray(rf, acc, coll::BlockArrays.BlockArray)\n\n\n\n\n\n","category":"method"},{"location":"internals/#Transducers._foldl_lazy_hcat-Tuple{Any,Any,AbstractArray{T,2} where T}","page":"Internals","title":"Transducers._foldl_lazy_hcat","text":"_foldl_lazy_hcat(rf, acc, coll::LazyArrays.Hcat)\n\n\n\n\n\n","category":"method"},{"location":"internals/#Transducers._foldl_lazy_vcat-Tuple{Any,Any,Any}","page":"Internals","title":"Transducers._foldl_lazy_vcat","text":"_foldl_lazy_vcat(rf, acc, coll::LazyArrays.Vcat)\n\n\n\n\n\n","category":"method"},{"location":"internals/#Transducers._set_joiner_value-Tuple{Any,Any}","page":"Internals","title":"Transducers._set_joiner_value","text":"_set_joiner_value(ps::PrivateState, x) :: PrivateState\n\nSet .state field of the PrivateState of the first \"unbalanced\" Joiner.  A Joiner matched with preceding Splitter would be treated as a regular reducing function node.  Thus, private state ps must have one more Joiner than Splitter.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Transducers.air-Tuple{Any}","page":"Internals","title":"Transducers.air","text":"air.(broadcasting_expression) :: Broadcasted\n\nBroadcast without materialization.\n\nThe idea is taken from @dawbarton's _lazy function: https://discourse.julialang.org/t/19641/20.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Transducers.foldl_nocomplete-Tuple{Any,Any,Any}","page":"Internals","title":"Transducers.foldl_nocomplete","text":"foldl_nocomplete(rf, init, coll)\n\nCall __foldl__ without calling complete.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Transducers.maybe_usesimd-Tuple{Transducers.AbstractReduction,Union{Val{true}, Val{false}, Val{:ivdep}, Bool, Symbol}}","page":"Internals","title":"Transducers.maybe_usesimd","text":"maybe_usesimd(xform, simd)\n\nInsert UseSIMD to xform if appropriate.\n\nArguments\n\nxform::Transducer\nsimd: false, true, or :ivdep.\n\nExamples\n\njulia> using Transducers\n       using Transducers: maybe_usesimd\n\njulia> maybe_usesimd(reducingfunction(Map(identity), right), false)\nReduction(\n    Map(identity),\n    BottomRF(\n        Transducers.right))\n\njulia> maybe_usesimd(reducingfunction(Map(identity), right), true)\nReduction(\n    Transducers.UseSIMD{false}(),\n    Reduction(\n        Map(identity),\n        BottomRF(\n            Transducers.right)))\n\njulia> maybe_usesimd(reducingfunction(Cat(), right), true)\nReduction(\n    Cat(),\n    Reduction(\n        Transducers.UseSIMD{false}(),\n        BottomRF(\n            Transducers.right)))\n\njulia> maybe_usesimd(reducingfunction(Map(sin) |> Cat() |> Map(cos), right), :ivdep)\nReduction(\n    Map(sin),\n    Reduction(\n        Cat(),\n        Reduction(\n            Transducers.UseSIMD{true}(),\n            Reduction(\n                Map(cos),\n                BottomRF(\n                    Transducers.right)))))\n\njulia> maybe_usesimd(\n           reducingfunction(\n               Map(sin) |> Cat() |> Map(cos) |> Cat() |> Map(tan),\n               right,\n           ),\n           true,\n       )\nReduction(\n    Map(sin),\n    Reduction(\n        Cat(),\n        Reduction(\n            Map(cos),\n            Reduction(\n                Cat(),\n                Reduction(\n                    Transducers.UseSIMD{false}(),\n                    Reduction(\n                        Map(tan),\n                        BottomRF(\n                            Transducers.right)))))))\n\n\n\n\n\n","category":"method"},{"location":"internals/#Transducers.reform-Tuple{Transducers.Reduction,Any}","page":"Internals","title":"Transducers.reform","text":"reform(rf, f)\n\nReset \"bottom\" reducing function of rf to f.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Transducers.simple_transduce-NTuple{4,Any}","page":"Internals","title":"Transducers.simple_transduce","text":"simple_transduce(xform, step, init, coll)\n\nSimplified version of transduce.  For simple transducers Julia may be able to emit a good code.  This function exists only for performance tuning.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Transducers.usesimd-Tuple{Transducers.AbstractReduction,Transducers.UseSIMD}","page":"Internals","title":"Transducers.usesimd","text":"usesimd(rf::Reduction, xfsimd::UseSIMD)\n\nWrap the inner-most loop of reducing function rf with xfsimd. xfsimd is inserted after the inner-most Cat if rf includes Cat.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Transducers.@default_finaltype-Tuple{Any,Any}","page":"Internals","title":"Transducers.@default_finaltype","text":"@default_finaltype(xf::Transducer, coll)\n\nInfer the type of the object that would be fed into the second argument input of the bottom reducing function rf(acc, input).\n\nSee: Base.@default_eltype\n\n\n\n\n\n","category":"macro"},{"location":"internals/#Transducers.@simd_if-Tuple{Any,Any}","page":"Internals","title":"Transducers.@simd_if","text":"@simd_if rf for ... end\n\nWrap for-loop with @simd if the outer most transducer of the reducing function rf is UseSIMD.\n\n\n\n\n\n","category":"macro"},{"location":"internals/#Transducers.@~-Tuple{Any}","page":"Internals","title":"Transducers.@~","text":"(@~ broadcasting_expression) :: Broadcasted\n\n\n\n\n\n","category":"macro"},{"location":"doctests/show_xf/#Show-method-for-transducers-1","page":"Show method for transducers","title":"Show method for transducers","text":"","category":"section"},{"location":"doctests/show_xf/#","page":"Show method for transducers","title":"Show method for transducers","text":"DocTestSetup = quote\n    using Transducers\n    using Transducers: TeeZip\nend","category":"page"},{"location":"doctests/show_xf/#","page":"Show method for transducers","title":"Show method for transducers","text":"julia> Map(sin) |> Map(cos) |> Map(tan)\nMap(sin) |>\n    Map(cos) |>\n    Map(tan)\n\njulia> TeeZip(Map(sin) |> TeeZip(Map(tan)))\nTeeZip(\n    Map(sin) |>\n        TeeZip(Map(tan))\n)\n\njulia> TeeZip(Map(sin) |> TeeZip(Map(tan) |> Filter(isfinite)) |> MapSplat(*))\nTeeZip(\n    Map(sin) |>\n        TeeZip(\n            Map(tan) |>\n                Filter(isfinite)\n        ) |>\n        MapSplat(*)\n)\n\njulia> TeeZip(Map(sin) |>\n              TeeZip(Map(tan) |> Filter(isfinite)) |>\n              MapSplat(*)) |> MapSplat(+)\nTeeZip(\n    Map(sin) |>\n        TeeZip(\n            Map(tan) |>\n                Filter(isfinite)\n        ) |>\n        MapSplat(*)\n) |>\n    MapSplat(+)\n\njulia> TeeZip(OfType(Float64)) |> MapSplat(+)\nTeeZip(OfType(Float64)) |>\n    MapSplat(+)","category":"page"},{"location":"doctests/show_xf/#","page":"Show method for transducers","title":"Show method for transducers","text":"DocTestSetup = nothing","category":"page"},{"location":"doctests/show_rf/#Show-method-for-reducing-functions-1","page":"Show method for reducing functions","title":"Show method for reducing functions","text":"","category":"section"},{"location":"doctests/show_rf/#","page":"Show method for reducing functions","title":"Show method for reducing functions","text":"DocTestSetup = quote\n    using Transducers\n    using Transducers: Reduction, TeeZip\nend","category":"page"},{"location":"doctests/show_rf/#","page":"Show method for reducing functions","title":"Show method for reducing functions","text":"Reduction(Filter(isfinite) |> Map(sin), +)\n\n# output\n\nReduction(\n    Filter(isfinite),\n    Reduction(\n        Map(sin),\n        BottomRF(\n            +)))","category":"page"},{"location":"doctests/show_rf/#","page":"Show method for reducing functions","title":"Show method for reducing functions","text":"rf = Reduction(Map(error), right)\n\n# output\n\nReduction(\n    Map(error),\n    BottomRF(\n        Transducers.right))","category":"page"},{"location":"doctests/show_rf/#","page":"Show method for reducing functions","title":"Show method for reducing functions","text":"rf = Reduction(\n    TeeZip(Filter(isodd) |> Map(identity) |> TeeZip(Map(identity))),\n    right,\n)\n\n# output\n\nSplitter(\n    Reduction(\n        Filter(isodd),\n        Reduction(\n            Map(identity),\n            Splitter(\n                Reduction(\n                    Map(identity),\n                    Joiner(\n                        Joiner(\n                            BottomRF(\n                                Transducers.right))))))))","category":"page"},{"location":"doctests/show_rf/#","page":"Show method for reducing functions","title":"Show method for reducing functions","text":"DocTestSetup = nothing","category":"page"}]
}
